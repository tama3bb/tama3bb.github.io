<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: angular-translate | AngularJS Ninja]]></title>
  <link href="http://angularjsninja.com/blog/categories/angular-translate/atom.xml" rel="self"/>
  <link href="http://angularjsninja.com/"/>
  <updated>2014-07-29T09:04:28+09:00</updated>
  <id>http://angularjsninja.com/</id>
  <author>
    <name><![CDATA[Akihito Tamagawa]]></name>
    <email><![CDATA[tama3bb@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[AngularJS アプリケーションを国際化するには]]></title>
    <link href="http://angularjsninja.com/blog/2013/09/05/angularjs-i18n/"/>
    <updated>2013-09-05T19:49:00+09:00</updated>
    <id>http://angularjsninja.com/blog/2013/09/05/angularjs-i18n</id>
    <content type="html"><![CDATA[<hr />

<p><img src="http://pascalprecht.github.io/angular-translate/docs/en/img/logo/angular-translate-alternative/angular-translate_alternative_medium2.png" alt="angular-translate" /></p>

<p>AngularJS アプリケーションを国際化するには、<a href="http://pascalprecht.github.io/angular-translate/">angular-translate</a> を使うのがとてもいい感じなので紹介。</p>

<p>簡単な特徴</p>

<ul>
<li>言語ごとにリソースファイルを分けられる</li>
<li>表示する言語のファイルだけを非同期に読み込める</li>
<li>選択言語を LocalStorage または Cookie に保存してくれる</li>
</ul>


<!-- more -->


<h2>angular-translate のインストール</h2>

<p>Bower でモジュールをインストールし、JS ファイルを適当なとこに置いて HTML から参照させて、AngularJS の依存モジュールとして記述。
<code>
$ bower install angular-translate
$ bower install angular-translate-storage-cookie
$ bower install angular-translate-storage-local
$ bower install angular-translate-loader-static-files
$ bower install angular-translate-handler-log
</code>
``` html index.html
<html>
  <head></p>

<pre><code>&lt;meta charset="utf-8"&gt;
&lt;title&gt;i18n app&lt;/title&gt;

&lt;script src="path/to/angular.min.js"&gt;&lt;/script&gt;
&lt;script src="path/to/angular-translate.min.js"&gt;&lt;/script&gt;
&lt;script src="path/to/angular-translate-storage-cookie.min.js"&gt;&lt;/script&gt;
&lt;script src="path/to/angular-translate-storage-local.min.js"&gt;&lt;/script&gt;
&lt;script src="path/to/angular-translate-loader-static-files.min.js"&gt;&lt;/script&gt;
&lt;script src="path/to/angular-translate-handler-log.min.js"&gt;&lt;/script&gt;
&lt;script src="app.js"&gt;&lt;/script&gt;
</code></pre>

<p>  </head></p>

<p>  <body ng-app="myApp"></p>

<p>  </body>
</html>
<code>
</code> javascript app.js
var app = angular.module(&lsquo;myApp&rsquo;, [&lsquo;pascalprecht.translate&rsquo;]);
```</p>

<h2>$translateProvider の設定</h2>

<p>$translateProvider を config で設定。</p>

<p>``` javascript
app.config([&lsquo;$translateProvider&rsquo;, function($translateProvider) {
  $translateProvider.useStaticFilesLoader({</p>

<pre><code>prefix: 'assets/i18n/locale-',
suffix: '.json'
</code></pre>

<p>  });
  $translateProvider.preferredLanguage(&lsquo;ja&rsquo;);
  $translateProvider.fallbackLanguage(&lsquo;en&rsquo;);
  $translateProvider.useMissingTranslationHandlerLog();
  $translateProvider.useLocalStorage();
}]);
```</p>

<ul>
<li>useStaticFilesLoader でリソースファイルのファイルパスを指定</li>
<li>preferredLanguage でデフォルトの言語キーを指定</li>
<li>fallbackLanguage で選択言語にリソースが見つからない場合の言語を指定</li>
<li>useMissingTranslationHandlerLog でキーに対応するリソースが見つからない場合に console 出力</li>
<li>useLocalStorage で選択言語の保存先として localStorage を指定（非対応ブラウザでは Cookie に保存される）</li>
</ul>


<p><code>
assets/i18n/
├── locale-en.json
└── locale-ja.json
</code>
リソースファイルは、en や ja などの言語キーの前（prefix）と後（suffix）を指定。</p>

<h2>リソースの記述方法</h2>

<p>JSON オブジェクトとして記述。ネストもできる。
``` javascript assets/i18n/locale-en.json
{
  &ldquo;HEADLINE&rdquo;: &ldquo;What an awesome module!&rdquo;,
  &ldquo;PARAGRAPH&rdquo;: &ldquo;Srsly!&rdquo;,
  &ldquo;NAMESPACE&rdquo;: {</p>

<pre><code>"PARAGRAPH": "And it comes with awesome features!"
</code></pre>

<p>  }
}
```</p>

<h2>HTML で利用するには</h2>

<p>HTML で利用する場合には、translate フィルタ、または translate ディレクティヴで。</p>

<p>``` html filters</p>

<h2>{{ 'HEADLINE' | translate }}</h2>


<p>{{ 'PARAGRAPH' | translate }}</p>


<p><code>
</code> html directives</p>

<h2 translate>HEADLINE</h2>


<p translate="PARAGRAPH"></p>


<p>```</p>

<h2>controller で利用するには</h2>

<p>controller で利用する場合には、$translate サービスで。</p>

<p><code>javascript controllers.js
app.controller('Ctrl', ['$scope', '$translate', function ($scope, $translate) {
  $scope.headline = $translate('HEADLINE');
  $scope.paragraph = $translate('PARAGRAPH');
  $scope.namespaced_paragraph = $translate('NAMESPACE.PARAGRAPH');
}]);
</code></p>

<h2>変数を使った置換</h2>

<p>メッセージの一部を置き換えられる。</p>

<p><code>
{
  "TRANSLATION_ID": "{{username}} is logged in."
}
</code></p>

<p>``` javascript controllers.js
angular.module(&lsquo;myApp&rsquo;).controller(&lsquo;Ctrl&rsquo;, [&lsquo;$scope&rsquo;, function ($scope) {</p>

<p>  $scope.translationData = {</p>

<pre><code>username: 'PascalPrecht'
</code></pre>

<p>  };
}]);
```</p>

<p>以下のように渡す。
<code>javascript controllers.js
$translate('TRANSLATION_ID', $scope.translationData);
</code>
<code>html filters
{{ 'TRANSLATION_ID' | translate:translationData }}
</code>
<code>html directive
&lt;ANY translate="TRANSLATION_ID" translate-values=""&gt;&lt;/ANY&gt;
</code></p>

<h2>言語の切り替え</h2>

<p>言語を切り替える場合は、$translate の uses で。</p>

<p>``` javascript controllers.js
angular.module(&lsquo;myApp&rsquo;).controller(&lsquo;Ctrl&rsquo;, [&lsquo;$translate&rsquo;, &lsquo;$scope&rsquo;, function ($translate, $scope) {</p>

<p>  $scope.changeLanguage = function (langKey) {</p>

<pre><code>$translate.uses(langKey);
</code></pre>

<p>  };</p>

<p>}]);
```
こんな感じかな。</p>

<p><code>html
&lt;button ng-click="changeLanguage('ja')" translate="BUTTON_LANG_JA"&gt;&lt;/button&gt;
&lt;button ng-click="changeLanguage('en')" translate="BUTTON_LANG_EN"&gt;&lt;/button&gt;
</code>
<code>javascript assets/i18n/locale-ja.json
{
  "BUTTON_LANG_JA": "日本語",
  "BUTTON_LANG_EN": "英語"
}
</code></p>

<p>たいへん便利な国際化モジュール、angular-translate の紹介でした。</p>
]]></content>
  </entry>
  
</feed>
