<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Firebase | AngularJS Ninja]]></title>
  <link href="http://angularjsninja.com/blog/categories/firebase/atom.xml" rel="self"/>
  <link href="http://angularjsninja.com/"/>
  <updated>2014-10-28T10:51:55+09:00</updated>
  <id>http://angularjsninja.com/</id>
  <author>
    <name><![CDATA[Akihito Tamagawa]]></name>
    <email><![CDATA[tama3bb@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[AngularJS Ionic Firebase で作るモバイルチャットアプリ]]></title>
    <link href="http://angularjsninja.com/blog/2014/02/17/angularjs-ionic-firebase/"/>
    <updated>2014-02-17T02:15:39+09:00</updated>
    <id>http://angularjsninja.com/blog/2014/02/17/angularjs-ionic-firebase</id>
    <content type="html"><![CDATA[<p>この週末、オリンピックを見ながら日本人が出てくるまでヒマだったりしたので、ふとモバイルチャットでも作ってみるかと思い立ってダラダラとやってみました。</p>

<p>数時間しかかけてないので「ザ・未完成」なデキですが、サクッとリアルタイムなモバイルチャットアプリケーションを作れてしまうのは、なんともラクチンで楽しい。</p>

<h2>利用した技術</h2>

<ul>
<li><a href="http://angularjs.org/">AngularJS</a></li>
<li><a href="http://ionicframework.com/">Ionic</a></li>
<li><a href="https://www.firebase.com/">Firebase</a></li>
</ul>


<p>Ionic についてはこれまでにブログで、書いてないや…。Firebase については<a href="/blog/2013/09/01/angularfire-realtime-chat-app/">ずいぶん前に</a>。</p>

<!-- more -->


<h2>モバイルチャットアプリ</h2>

<p>リアルタイム処理は Firebase まかせ。見た目は Ionic ベースで少し CSS をいじった程度。認証はとりあえず付けなかったので、サムネイルには AngularJS Ninja のをずっと出しちゃってます。</p>

<p>iPhone や Android から、以下のアドレスを表示して試していただくのがオススメです。</p>

<p><a href="http://ionic-fire.firebaseapp.com/">http://ionic-fire.firebaseapp.com/</a></p>

<iframe src="http://ionic-fire.firebaseapp.com/" height="568" width="320" frameborder="0" style="border: 3px double #aaa;"></iframe>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AngularFire でリアルタイムアプリケーション]]></title>
    <link href="http://angularjsninja.com/blog/2013/09/01/angularfire-realtime-chat-app/"/>
    <updated>2013-09-01T00:29:00+09:00</updated>
    <id>http://angularjsninja.com/blog/2013/09/01/angularfire-realtime-chat-app</id>
    <content type="html"><![CDATA[<hr />

<p>Firebase の AngularJS 向け API、<a href="http://angularfire.com">AngularFire</a> のページが公開されたばかりで、ちょうどいい機会なのでリアルタイムチャットアプリケーションの実装がどれほど簡単にできるのかを見ておく。</p>

<!-- more -->


<h2>AngularFire とは</h2>

<p><a href="http://angularfire.com">AngularFire</a> とは、Firebase による AngularJS のアプリケーションを高速に実装するためのサービスで、バックエンドのコードを書く必要も、サーバをセットアップする必要も無く、ただフロントエンドの実装に集中できる。</p>

<p>AngularFire の API を利用することで、AngularJS のモデルが自動的に同期（保存・更新）される。AngularJS の強みの 1 つである 2-way データバインドを、サーバ側にまで拡張する 3-way データバインドと言える。</p>

<h2>Firebase とは</h2>

<p><a href="https://www.firebase.com">Firebase</a> とは、サーバ管理不要で、高速・スケーラブル・リアルタイムなバックエンドを提供するサービス。一定の転送量・接続数・容量まで無料で、クレジッドカード無しで始めることができる。</p>

<h2>概要</h2>

<p>Firebase の URL とモデルを関連付けすることで、アプリケーションを利用しているすべてのクライアント（ブラウザ）を同期させる。</p>

<p>まず、<code>firebase.js</code>と<code>angularfire.js</code>を参照。</p>

<p>``` html</p>

<script src="https://cdn.firebase.com/v0/firebase.js"></script>


<script src="https://cdn.firebase.com/libs/angularfire/0.3.0/angularfire.js"></script>


<p>```</p>

<p>AngularJS の app モジュールが依存するモジュールとして、<code>firebase</code>を記述。</p>

<p><code>javascript
var myapp = angular.module('myapp', ['firebase']);
</code></p>

<h2>同期</h2>

<p>Firebase とモデルを同期化させるコード。すべてのローカルでの変更が自動的に Firebase に送信され、すべてのリモートでの変更が即座にローカルのモデルに反映される。</p>

<p><code>angularFire</code>を controller が依存するサービスとして記述。</p>

<p>``` javascript
myapp.controller(&lsquo;MyCtrl&rsquo;, [&lsquo;$scope&rsquo;, &lsquo;angularFire&rsquo;,
  function MyCtrl($scope, angularFire) {</p>

<pre><code>...
</code></pre>

<p>  }
]);
```</p>

<p>Firebase の参照を、<code>$scope</code>のモデルにバインド。</p>

<p><code>javascript
var ref = new Firebase('https://&lt;my-firebase&gt;.firebaseio.com/items');
angularFire(ref, $scope, 'items');
</code></p>

<p>マークアップで普通にモデルを利用。</p>

<p>``` html</p>

<ul ng-controller="MyCtrl">
  <li ng-repeat="item in items">: </li>
</ul>


<p>```</p>

<p>Firebase からのデータは非同期にロードされ、サーバからのデータロードの通知には promise が利用できる。ローカルで実施したモデルへの変更は、AngularFire が自動的にリモートのデータとマージする。</p>

<p>モデルのデータ変更についても普通に実装。</p>

<p><code>javascript
// モデルに直接新しいアイテムを追加
$scope.items.push({name: "Firebase", desc: "is awesome!"});
// $scope に function を定義し、directive からのモデル操作も可
$scope.removeItem = function() {
  $scope.items.splice($scope.toRemove, 1);
  $scope.toRemove = null;
};
</code>
なお、同期のタイミングを制御する API も用意されている。詳しくは、AngularFire の Documentation ページで <a href="http://angularfire.com/documentation.html#explicit">Explicit Data Binding</a> を参照。</p>

<h2>まとめ</h2>

<p>AngularFire の<a href="http://angularfire.com">トップページ</a>にチャットアプリケーションを実装した 30 行のコードが掲載されている。また、そこでチャットアプリケーションのデモを確認できる。</p>

<p>たったこれだけの簡単なコードで、AngularJS のモデルをサーバに同期させ、すべてのクライアントに即座に同期させるリアルタイムアプリケーションを実装することができる。</p>

<p>AngularJS の勉強会をするなら、ハンズオンの題材としてちょうどよさそう。</p>
]]></content>
  </entry>
  
</feed>
