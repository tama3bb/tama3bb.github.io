<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: service | AngularJS Ninja]]></title>
  <link href="http://angularjsninja.com/blog/categories/service/atom.xml" rel="self"/>
  <link href="http://angularjsninja.com/"/>
  <updated>2014-10-25T15:52:50+09:00</updated>
  <id>http://angularjsninja.com/</id>
  <author>
    <name><![CDATA[Akihito Tamagawa]]></name>
    <email><![CDATA[tama3bb@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[AngularJS で HTTP ヘッダを設定するには]]></title>
    <link href="http://angularjsninja.com/blog/2014/02/04/angularjs-http-headers/"/>
    <updated>2014-02-04T16:08:51+09:00</updated>
    <id>http://angularjsninja.com/blog/2014/02/04/angularjs-http-headers</id>
    <content type="html"><![CDATA[<hr />

<h2>HTTP Headers を設定</h2>

<p>AngularJS による HTTP リクエストについては、<code>$httpProvider.defaults.headers</code>オブジェクトで HTTP ヘッダ情報を設定できる。</p>

<p><code>javascript
$httpProvider.defaults.headers.common.Authorization = '...';
</code></p>

<p>以下のように、get だけ、post だけに適用することも。</p>

<p><code>javascript
$httpProvider.defaults.headers.get['Authorization'] = '...';
$httpProvider.defaults.headers.post = { 'Authorization' : '...' };
</code></p>

<p>（複数の書き方を例示するために、わざと違った書き方にしてます）</p>

<!-- more -->


<h2>Cache-Control の設定例</h2>

<p>IE は XHR (Ajax) リクエストでもキャッシュするようなので、IE をサポートするのであれば初めから Cache-Control などの設定を入れておくのがいいのかも。</p>

<p><code>javascript
$httpProvider.defaults.headers.common['Cache-Control'] = 'no-cache';
</code></p>

<p>他にも If-Modified-Since を設定する必要がありそう。あるいは Expires のほうが適切なのかも。ここの設定について詳しい方、こっそり教えてください！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AngularJSでちゃちゃっとアニメーションを試す]]></title>
    <link href="http://angularjsninja.com/blog/2013/12/08/angularjs-nganimate/"/>
    <updated>2013-12-08T00:20:54+09:00</updated>
    <id>http://angularjsninja.com/blog/2013/12/08/angularjs-nganimate</id>
    <content type="html"><![CDATA[<hr />

<h2>AngularJS 1.2.4</h2>

<p>AngularJS 1.2.4 がリリースされ、$animate 関連の <a href="https://github.com/angular/angular.js/blob/master/CHANGELOG.md#1.2.4">Bug Fixes</a> が入り ng-include をネストした ng-repeat でアニメーションが効かない問題も解消されたので、アニメーションをちゃちゃっと試す方法を紹介。</p>

<h2>angular-animate.js</h2>

<p>HTML に angular と angular-animate の js ファイルを記述する。</p>

<p>``` html</p>

<p><script src="angular.min.js">
<script src="angular-animate.min.js">
```</p>

<h2>ngAnimate モジュール</h2>

<p>依存モジュールとして <code>ngAnimate</code> を記述する。</p>

<p><code>javascript
angular.module('app', [ 'ngAnimate' ])
</code></p>

<h2>CSS 定義</h2>

<p>これだけでもうゴール間近で、あとはどんなアニメーションを適用するのかを考えて定義するだけ。</p>

<p>アニメーションを CSS で定義する方法と JavaScript で記述する方法があり、ここではちゃちゃっと試すのが簡単な CSS を例示する。</p>

<p><!-- more --></p>

<p><code>css
.ng-enter,
.ng-leave,
.ng-move {
  -webkit-transition: opacity 0.15s linear;
  transition: opacity 0.15s linear;
}
.ng-enter {
  opacity: 0;
}
.ng-enter.ng-enter-active {
  opacity: 1;
}
.ng-leave {
  opacity: 1;
}
.ng-leave.ng-leave-active {
  opacity: 0;
}
.ng-move {
  opacity: .5;
}
.ng-move.ng-move-active {
  opacity: 1;
}
</code></p>

<p>この CSS 定義だけで、<code>enter</code> <code>leave</code> <code>move</code>系の<code>ngRepeat</code> <code>ngView</code> <code>ngInclude</code> <code>ngSwitch</code> <code>ngIf</code> directives に fade（フェード）のアニメーションが適用される。</p>

<h2>アニメーションを限定的に適用</h2>

<p>ちゃちゃっとアニメーションを試してみるのにはさっきの CSS で OK だけど、アニメーションされすぎで気持ち悪いとか、アニメーションのせいでむしろ遅い UI に感じられるとか、テーブルタグなどで不自然なレンダリングになるとか…。</p>

<p>なので、ちゃんとアニメーションを使うときには CSS のセレクタに class name（以下では animated）を追加し、適用箇所を限定する。</p>

<p><code>css
.animated.ng-enter,
.animated.ng-leave,
.animated.ng-move {
  -webkit-transition: opacity 0.15s linear;
  transition: opacity 0.15s linear;
}
.animated.ng-enter {
  opacity: 0;
}
.animated.ng-enter.ng-enter-active {
  opacity: 1;
}
.animated.ng-leave {
  opacity: 1;
}
.animated.ng-leave.ng-leave-active {
  opacity: 0;
}
.animated.ng-move {
  opacity: .5;
}
.animated.ng-move.ng-move-active {
  opacity: 1;
}
</code></p>

<p>そして、HTML 側でアニメーションさせたい<code>ng-if</code>や<code>ng-repeat</code>を指定した要素の class 属性に <code>animated</code> を追記する。</p>

<p><code>html
&lt;div ng-if="model.visible" class="animated"&gt;...&lt;/div&gt;
</code></p>

<p>むやみやたらにアニメーションするのでなく、こうしてポイントポイントで上品に適用していくことを心掛けよう。</p>

<h2>サンプル</h2>

<p>
<a class="jsbin-embed" href="http://jsbin.com/EpiHEwuK/26/embed?output">JS Bin</a><script src="http://static.jsbin.com/js/embed.js"></script>
</p>

<h2>class 属性の変化</h2>

<p>class 属性が変化する流れを見ておく。</p>

<p><code>model.visible = false;</code>（非表示状態）のときがこのようなコードだとして、</p>

<p><code>html
&lt;div ng-if="model.visible" class="animated"&gt;...&lt;/div&gt;
</code></p>

<p><code>model.visible = true;</code>（表示に切替）になるとまず<code>ng-enter</code>が追加（<code>opacity: 0;</code>）されて、</p>

<p><code>html
&lt;div ng-if="model.visible" class="animated ng-enter"&gt;...&lt;/div&gt;
</code></p>

<p>その後すぐに<code>ng-enter-active</code>が追加（<code>opacity: 1;</code>）されることでアニメーションが開始する。CSS で定義している <code>transition: opacity 0.15s linear;</code>により 0.15s の速度でフェードしながら表示（fadeIn）され、</p>

<p><code>html
&lt;div ng-if="model.visible" class="animated ng-enter ng-enter-active"&gt;...&lt;/div&gt;
</code></p>

<p>要素の class 属性は元に戻る。</p>

<p><code>html
&lt;div ng-if="model.visible" class="animated"&gt;...&lt;/div&gt;
</code></p>

<p>その逆で表示から非表示になるときには、<code>ng-enter</code>の代わりに<code>ng-leave</code>と<code>ng-leave-active</code>が class 属性に追加される。</p>

<h2>アニメーションに対応する標準 directive</h2>

<p>以下の AngularJS 標準 directive には、アニメーションのための処理が実装されているので、表示・非表示が切り替わるタイミングで class 属性に先述したような値（<code>ng-enter</code>など）が反映される。</p>

<table>
<thead>
<tr>
<th>Directive </th>
<th> Supported Animations</th>
</tr>
</thead>
<tbody>
<tr>
<td>ngRepeat </td>
<td> enter, leave, move</td>
</tr>
<tr>
<td>ngView </td>
<td> enter, leave</td>
</tr>
<tr>
<td>ngInclude </td>
<td> enter, leave</td>
</tr>
<tr>
<td>ngSwitch </td>
<td> enter, leave</td>
</tr>
<tr>
<td>ngIf </td>
<td> enter, leave</td>
</tr>
<tr>
<td>ngClass </td>
<td> add, remove</td>
</tr>
<tr>
<td>ngShow / ngHide </td>
<td> add, remove (ng-hide class 値)</td>
</tr>
</tbody>
</table>


<p>もちろんカスタム directive でも $animate service を利用して標準 directive と同じようにアニメーションを実現できるけど、その方法についてはまた別の機会に。</p>

<h2>ngAnimate-animate.css</h2>

<p>最後に、<a href="https://daneden.me/animate/">animate.css</a> を AngularJS 1.2 で利用できるようにするドライバーモジュール <a href="https://github.com/yearofmoo/ngAnimate-animate.css">ngAnimate-animate.css</a> を紹介。</p>

<p>animate.css とこのモジュールを使えば、class 属性に <code>dn-fade</code> と記述するだけでフェードのアニメーションを利用できるようになる。その他いろいろなアニメーションも class 属性に指定するだけで試せる。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AngularJS 1.2.0-rc3 以降の Promise]]></title>
    <link href="http://angularjsninja.com/blog/2013/10/26/angularjs-1.2.0-rc3-promises/"/>
    <updated>2013-10-26T14:15:00+09:00</updated>
    <id>http://angularjsninja.com/blog/2013/10/26/angularjs-1.2.0-rc3-promises</id>
    <content type="html"><![CDATA[<hr />

<h2>AngularJS 1.2.0-rc3 以降、Promise の扱いに注意</h2>

<p>rc2 までと異なり、promise の自動アンラップ（auto unwrapping）がデフォルトで無効となり、promise を直接 $scope の変数に突っ込んでたりするとうまく動かなくなる。</p>

<p>rc2 までは、promise がリターンされるとき、こんなふうに書けた。
<code>javascript controllers.js
$scope.values = NinjaService.getValues();
</code></p>

<p>rc3 からは、こう書かないと動かない。
<code>javascript controllers.js
NinjaService.getValues().then(function(values) {
  $scope.values = values;
});
</code></p>

<p>自動アンラップを採用しなくした理由は、この Issue でのやり取りに詳しく書かれている。</p>

<p><a href="https://github.com/angular/angular.js/issues/4158">Automatic unwrapping of promises by $parse severely limits its usefulness · Issue #4158 · angular/angular.js</a></p>

<p>この変更によって、前回のエントリーで書いた Angular UI の Typeahead も動作するようになったということ。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AngularJS で Web API を呼び出すコードをまとめる]]></title>
    <link href="http://angularjsninja.com/blog/2013/08/29/angularjs-web-api-call/"/>
    <updated>2013-08-29T08:42:00+09:00</updated>
    <id>http://angularjsninja.com/blog/2013/08/29/angularjs-web-api-call</id>
    <content type="html"><![CDATA[<hr />

<p>AngularJS で Web API を呼び出す $http などを利用するコードを、各 controller に散らして実装してしまわずに、どこかに集約しておきたいぞって場合の話。</p>

<!-- more -->


<p>``` javascript services.js
app.factory(&lsquo;NinjaService&rsquo;, function($http) {
  var search = function(params) {</p>

<pre><code>return $http.get('/search', {params: params}).then(function(response) {
  return response.data;
});
</code></pre>

<p>  };
  return {</p>

<pre><code>search: search
</code></pre>

<p>  };
});
```</p>

<p>``` javascript controllers.js
app.controller(&lsquo;NinjaController&rsquo;, function($scope, NinjaService) {
  $scope.search = function() {</p>

<pre><code>NinjaService.search(params).then(function(data) {
  $scope.results = data.results;
});
</code></pre>

<p>  };
});
```</p>

<p>こんな感じで、XxxService とかいう名前でサービスを factory 使って宣言しておけば、同じコードを複数の controller で利用したいときに便利だし、Web API 呼び出しのコードがまとまることで見通しやすくなる。</p>

<p>このコードに出てくる params については、search メソッドのクエリパラメータとして検索条件を渡してるイメージなだけで、詳細は省略。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AngularJS ではモデルをどう宣言すればいいのか]]></title>
    <link href="http://angularjsninja.com/blog/2013/08/28/how-to-declare-models/"/>
    <updated>2013-08-28T07:48:00+09:00</updated>
    <id>http://angularjsninja.com/blog/2013/08/28/how-to-declare-models</id>
    <content type="html"><![CDATA[<hr />

<h2>AngularJS の ng-model、大事なのは dot があること</h2>

<p>AngularJS では、モデルをどこに宣言すればいいんだってのがわかりにくい。</p>

<p>controller に $scope があって、簡単なサンプルコードでは大抵そこに直接<code>$scope.name</code>みたいに記述されているので、同じように書いてしまう。</p>

<!-- more -->


<p>うまくいかないコード例は以下。</p>

<p>``` html</p>

<!-- うまくいかないコード -->


<div ng-controller="ParentController">
  <input type="text" name="parent" ng-model="name">
  <div ng-controller="ChildController">
    <input type="text" name="child" ng-model="name">
  </div>
</div>


<p><code>
</code> javascript
app.controller(&lsquo;ParentController&rsquo;, function($scope) {});
app.controller(&lsquo;ChildController&rsquo;, function($scope) {});</p>

<p>```
このコードでは、parent テキストボックスに入力した値が child テキストボックスにも同期され、一見うまくいくように思ってしまう。ところが、一度でも child テキストボックスに値を入力すると、別のスコープになってその後まったく同期されなくなる。</p>

<p>うまくいくコードは以下。大事なのは dot があること。dot があることによって、参照が同じになって、両方のテキストボックスの値が同期され続ける。</p>

<p>``` html</p>

<!-- うまくいくコード -->


<div ng-controller="ParentController">
  <input type="text" name="parent" ng-model="aModel.name">
  <div ng-controller="ChildController">
    <input type="text" name="child" ng-model="aModel.name">
  </div>
</div>


<p>```</p>

<h2>AngularJS のモデルは factory で宣言</h2>

<p>さて、ちゃんとモデルを宣言したい場合はどう書けばいいのか。さきほどの例で言えば、aModel はどこでどう宣言しておくことができるのか。</p>

<p>答えは factory で、以下のようなコード。</p>

<p>``` javascript
app.factory(&lsquo;aModel&rsquo;, function() {
  return {</p>

<pre><code>name: ''
</code></pre>

<p>  };
});
```</p>

<p>これで、どこにだって DI して使えるようになるので、<strong>親子の関係にない controller 間でも同期</strong>させることができるモデルとなる。</p>

<p><code>javascript
app.controller('ExampleController', function($scope, aModel) {
  $scope.aModel = aModel;
}
</code></p>

<p>この factory のモデルはシングルトンです、はい。</p>

<p><code>app.controller</code>とか<code>app.factory</code>の app って何なのかとか、DI って何なのかとか基本的なところを飛ばしてますが、その辺はまたあらためて。</p>
]]></content>
  </entry>
  
</feed>
