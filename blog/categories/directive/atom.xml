<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: directive | AngularJS Ninja]]></title>
  <link href="http://angularjsninja.com/blog/categories/directive/atom.xml" rel="self"/>
  <link href="http://angularjsninja.com/"/>
  <updated>2014-10-25T15:52:50+09:00</updated>
  <id>http://angularjsninja.com/</id>
  <author>
    <name><![CDATA[Akihito Tamagawa]]></name>
    <email><![CDATA[tama3bb@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[AngularJS 1.3 新機能 ngModelOptions]]></title>
    <link href="http://angularjsninja.com/blog/2014/10/17/angularjs-1.3-ngmodeloptions/"/>
    <updated>2014-10-17T18:57:38+09:00</updated>
    <id>http://angularjsninja.com/blog/2014/10/17/angularjs-1.3-ngmodeloptions</id>
    <content type="html"><![CDATA[<p><a href="/blog/2014/10/14/angularjs-1.3.0-released/">AngularJS 1.3.0</a> で導入された新機能から、ng-model でのモデル更新を調整できる directive の <a href="https://docs.angularjs.org/api/ng/directive/ngModelOptions">ngModelOptions</a> について取り上げます。</p>

<h2>ngModelOptions</h2>

<p>すぐに覚えて使ってみるべきオプションは、<code>updateOn</code> と <code>debounce</code> ですね。</p>

<h3>updateOn</h3>

<p><code>updateOn</code> は、input などの UI に対するどのイベントの場合にモデルを更新するかを指定できます。</p>

<p>``` javascript
&lt;input type=&ldquo;text&rdquo; name=&ldquo;userName&rdquo;</p>

<pre><code>ng-model="user.name"
ng-model-options="{ updateOn: 'blur' }"&gt;
</code></pre>

<p>```</p>

<p>これで、blur（フォーカスが外れる）イベントまでは、この input で入力値を変更してもモデルに反映されなくなります。blur イベントではじめてモデル更新されます。</p>

<h3>debounce</h3>

<p><code>debounce</code> は、モデルの更新を待機しておく時間を、ミリ秒単位で指定できます。</p>

<p>``` javascript
&lt;input type=&ldquo;text&rdquo; name=&ldquo;userName&rdquo;</p>

<pre><code>ng-model="user.name"
ng-model-options="{ debounce: 1000 }"&gt;
</code></pre>

<p>```</p>

<p>これで、変更から 1 秒（1,000 ミリ秒）経過後にモデルが更新されるようになります。変更から 1 秒経過するまでに別の変更があった場合には、待機中の更新処理は破棄されます。</p>

<!-- more -->


<h3>複数オプションの指定</h3>

<p>ngModelOptions は、以下のように複数のオプションを一度に指定できます。この指定は、モデル更新を 500 ミリ秒遅延させるが、blur イベントのみすぐに更新という意味になります。</p>

<p><code>javascript
ng-model-options="{ updateOn: 'default blur', debounce: {'default': 500, 'blur': 0} }"
</code></p>

<h3>使用上の注意</h3>

<p>ngModelOptions で <code>updateOn</code> や <code>debounce</code> を利用すると、input フィールドの入力値と、実際のモデルの値が異なっている状態が増えます。そのため、モデルのほうを変更するときには、関係する input フィールドに対して <code>$rollbackViewValue</code> を呼び出すことで、モデルの値と一致させ、遅延されている更新処理をキャンセルさせます。</p>

<p><code>$rollbackViewValue</code> function は、userForm.userName.$rollbackViewValue() のように参照して呼び出せます。</p>

<h3>submit イベントで更新完了</h3>

<p>待機中の更新処理は、<code>submit</code> イベントによって即座に実行されます。<code>ngClick</code> イベントはモデル更新前となるので、更新後のモデルにアクセスしたい場合には <code>ngSubmit</code> を利用します。</p>

<h3>ngModelOptions は子孫要素にも適用</h3>

<p>ngModelOptions は、input 要素に直接指定するだけでなく、祖先要素となる <code>form</code> などに指定することもできます。</p>

<h3>その他のオプション</h3>

<ul>
<li><code>allowInvalid</code></li>
</ul>


<p>invalid なモデル値を許容するか、undefined（デフォルト動作）にするかを boolean で指定。</p>

<ul>
<li><code>getterSetter</code></li>
</ul>


<p>getters/setters として <code>ngModel</code> に function をバインドするかを boolean で指定。</p>

<ul>
<li><code>timezone</code></li>
</ul>


<p><code>&lt;input type="date"&gt;</code> <code>&lt;input type="time"&gt;</code> の Date インスタンスを読み書きするときに利用するタイムゾーンを指定する。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[非活性（ng-disabled）にしてもaタグのボタンだとng-click動くので注意]]></title>
    <link href="http://angularjsninja.com/blog/2014/02/06/anchor-with-ngdisabled-caveat/"/>
    <updated>2014-02-06T15:29:21+09:00</updated>
    <id>http://angularjsninja.com/blog/2014/02/06/anchor-with-ngdisabled-caveat</id>
    <content type="html"><![CDATA[<hr />

<h2>Bootstrap のボタン</h2>

<p><a href="http://getbootstrap.com">Bootstrap</a> ベースのボタンに<code>ng-click</code>を記述する（form を submit しない）コードは、主に以下の 2 通りある。</p>

<p><code>html
&lt;button type="button" class="btn" ng-click="handleClick()"&gt;Done&lt;/button&gt;
&lt;a href="#" class="btn" ng-click="handleClick()"&gt;Done&lt;/a&gt;
</code></p>

<p>どちらでも見た目は同じになるし、イベント処理は<code>ng-click</code>がやってくれるし、<code>&lt;a&gt;</code>のほうがコードは短くなるしって感じで、どっちも一緒なんだし<code>&lt;a&gt;</code>にしとこってノリでやってると、<code>disabled</code> のワナにハマるかも。</p>

<!-- more -->


<h2>aタグの場合、ng-disabled で非活性にできるのは見た目だけ</h2>

<p>ボタンを非活性にするための AngularJS 標準 directive に、<a href="http://docs.angularjs.org/api/ng.directive:ngDisabled"><code>ng-disabled</code></a>がある。これを使うと、<code>ng-disabled="true"</code>となるときにボタンが非活性になってくれる。</p>

<p><code>html
&lt;button type="button" class="btn" ng-click="handleClick()" ng-disabled="aForm.$invalid"&gt;Done&lt;/button&gt;
&lt;a href="#" class="btn" ng-click="handleClick()" ng-disabled="aForm.$invalid"&gt;Done&lt;/a&gt;
</code></p>

<p>ここで注意が必要なのは、<code>&lt;a&gt;</code>のほうは<code>ng-disabled="true"</code>で非活性になっているときでも、ボタンクリックで<code>ng-click</code>の処理が走るという点。見た目が非活性になっているので、<code>ng-click</code>のほうも制御してくれているだろうと期待して（思い込んで）しまう。</p>

<p>そんなわけで、<code>&lt;a&gt;</code>タグに<code>ng-disabled</code>を使うときは注意しよう。<code>&lt;button type="button"&gt;</code>に変えるか、どうしても<code>&lt;a&gt;</code>タグでいくなら<code>ng-click="!aForm.$invalid &amp;&amp; handleClick()"</code>とかってしときましょう…。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AngularJSのng-ifで文字列を使うなら !! を付けよう]]></title>
    <link href="http://angularjsninja.com/blog/2014/02/05/ngif-string-caveat/"/>
    <updated>2014-02-05T17:44:16+09:00</updated>
    <id>http://angularjsninja.com/blog/2014/02/05/ngif-string-caveat</id>
    <content type="html"><![CDATA[<hr />

<h2>&lsquo;0&rsquo; が表示されない…</h2>

<p><code>ng-if</code> あるいは、<code>ng-show</code>や<code>ng-hide</code>を使うときに、string 値の有無で表示判定を記述することもある。</p>

<p>
``` html</p>

<p ng-if="model.value">{{model.label}}</p>


<p>```
</p>

<p>そんなとき、<code>model.value</code>の値が<code>'0'</code>だったらどうなるか。</p>

<p>なんと、表示されない…。</p>

<!-- more -->


<h2>&lsquo;0&rsquo; だけじゃない</h2>

<p>この現象、<code>'0'</code>だけでなく、<code>'f'</code> <code>'no'</code> <code>'n'</code>といった文字列（大文字・小文字問わず）の場合であっても表示されない。</p>

<p>angular.js のコードはこうなってる。</p>

<p>``` javascript
function toBoolean(value) {
  if (typeof value === &lsquo;function&rsquo;) {</p>

<pre><code>value = true;
</code></pre>

<p>  } else if (value &amp;&amp; value.length !== 0) {</p>

<pre><code>var v = lowercase("" + value);
value = !(v == 'f' || v == '0' || v == 'false' || v == 'no' || v == 'n' || v == '[]');
</code></pre>

<p>  } else {</p>

<pre><code>value = false;
</code></pre>

<p>  }
  return value;
}
```</p>

<h2>boolean にしちゃっておこう</h2>

<p>ということで、文字列の有無で判定させたいだけってときは<code>!!</code>を付けときましょう。boolean とか object の場合でも<code>!!</code>付ける方針にしとくのがラクでいいかな。</p>

<p>
``` html</p>

<p ng-if="!!model.value">{{model.label}}</p>


<p>```
</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AngularJS で Enter キーを検出するコード]]></title>
    <link href="http://angularjsninja.com/blog/2014/02/03/angularjs-event-on-enter/"/>
    <updated>2014-02-03T18:28:23+09:00</updated>
    <id>http://angularjsninja.com/blog/2014/02/03/angularjs-event-on-enter</id>
    <content type="html"><![CDATA[<hr />

<p>テキストボックスなどで、Enter キーによるイベント処理を記述するコード例をいくつか。</p>

<h2>$event オブジェクト</h2>

<p><code>ng-keydown</code>などの directive を利用する際には、<code>$event</code>でイベントオブジェクトを利用。</p>

<p>``` javascript
$scope.comments = [];
$scope.handleKeydown = function(e) {
  if (e.which !== 13) {</p>

<pre><code>$scope.comments.push($scope.newComment);
$scope.newComment = '';
</code></pre>

<p>  }
}
```</p>

<p>``` html
<input type="text" ng-model="newComment" ng-keydown="handleKeydown($event)"></p>

<p><ul>
  <li ng-repeat="comment in comments"></li>
<ul>
```</p>

<p><!-- more --></p>

<h2>カスタム directive でのイベント処理</h2>

<p>カスタム directive を定義する場合は、jQuery と同じような感じでバインド。</p>

<p>``` javascript
myApp.directive(&lsquo;handleKeydown&rsquo;, function() {
  return {</p>

<pre><code>require: 'ngModel',
link: function(scope, element, attrs, modelCtrl) {
  element.bind('keydown', function(e) {
    if (e.which === 13) {
      scope.$apply(function() {
        scope.comments.push(scope.newComment);
        scope.newComment = '';
      });
    }
  });
}
</code></pre>

<p>  };
});
```</p>

<p><code>html
&lt;input type="text" ng-model="newComment" handle-keydown&gt;
</code></p>

<h2>form（ng-form）の submit</h2>

<p>最後に持ってきたものの、form の submit で実現することを真っ先に検討するのが吉。Enter キーも処理されるし、テキストボックスがたくさんあっても無問題。</p>

<p><code>html
&lt;form ng-submit="handleKeydown()"&gt;
  &lt;input type="text" ng-model="newComment"&gt;
&lt;/form&gt;
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AngularJS Directive なんてこわくない（その４）]]></title>
    <link href="http://angularjsninja.com/blog/2013/11/29/angularjs-custom-directives/"/>
    <updated>2013-11-29T15:33:32+09:00</updated>
    <id>http://angularjsninja.com/blog/2013/11/29/angularjs-custom-directives</id>
    <content type="html"><![CDATA[<hr />

<h2>controller, require</h2>

<p><a href="/blog/2013/11/20/angularjs-custom-directives/">その１</a>、<a href="/blog/2013/11/22/angularjs-custom-directives/">その２</a>、<a href="/blog/2013/11/27/angularjs-custom-directives/">その３</a>に引き続き、今回もカスタム directive について。</p>

<p>今回のサンプルコードは、UI Bootstrap の <a href="https://github.com/angular-ui/bootstrap/tree/master/src/tabs">Tabs</a> からの一部抜粋で、<code>controller</code> <code>require</code>オプションについて見ていく。</p>

<p>``` javascript tabs.js
angular.module(&lsquo;ui.bootstrap.tabs&rsquo;, [])
.controller(&lsquo;TabsetController&rsquo;, [&lsquo;$scope&rsquo;, function TabsetCtrl($scope) {
  var ctrl = this,</p>

<pre><code>  tabs = ctrl.tabs = $scope.tabs = [];
</code></pre>

<p>  ctrl.select = function(tab) {</p>

<pre><code>angular.forEach(tabs, function(tab) {
  tab.active = false;
});
tab.active = true;
</code></pre>

<p>  };
  // &hellip;
}])</p>

<p>.directive(&lsquo;tabset&rsquo;, function() {
  return {</p>

<pre><code>restrict: 'EA',
transclude: true,
replace: true,
require: '^tabset',
scope: {},
controller: 'TabsetController',
templateUrl: 'template/tabs/tabset.html',
compile: function(elm, attrs, transclude) {
  return function(scope, element, attrs, tabsetCtrl) {
    // ...
  };
}
</code></pre>

<p>  };
})</p>

<p>.directive(&lsquo;tab&rsquo;, [&lsquo;$parse&rsquo;, function($parse) {
  return {</p>

<pre><code>require: '^tabset',
restrict: 'EA',
replace: true,
templateUrl: 'template/tabs/tab.html',
transclude: true,
scope: {
  heading: '@',
  onSelect: '&amp;select',
  onDeselect: '&amp;deselect'
},
controller: function() {},
compile: function(elm, attrs, transclude) {
  return function postLink(scope, elm, attrs, tabsetCtrl) {
    // ...
    scope.$watch('active', function(active) {
      setActive(scope.$parent, active);
      if (active) {
        tabsetCtrl.select(scope);
        scope.onSelect();
      } else {
        scope.onDeselect();
      }
    });
    // ...
    scope.select = function() {
      if (!scope.disabled ) {
        scope.active = true;
      }
    };
    tabsetCtrl.addTab(scope);
    scope.$on('$destroy', function() {
      tabsetCtrl.removeTab(scope);
    });
    // ...
  };
}
</code></pre>

<p>  };
}])
```</p>

<!-- more -->


<h2>controller</h2>

<p>directive にも<code>ng-controller</code>で利用するときに定義するのと同じような<code>controller</code>を記述でき、<code>$scope</code>や<code>$http</code>などをインジェクト（DI）することもできる。directive の場合でも、<code>controller</code>では DOM 操作するコードは記述しないようにし、<code>compile</code>または <code>link</code>のほうに記述する。</p>

<p>なお、directive の<code>controller</code>には、モジュールで定義した<code>controller</code>の名前を記述することができる。</p>

<p>``` javascript
.directive(&lsquo;tabset&rsquo;, function() {
  return {</p>

<pre><code>...,
controller: 'TabsetController',
...
</code></pre>

<p>  };
})
```</p>

<p>注意すべき点としては、再利用されるコンポーネントとして directive を作成する場合、<code>controller</code>に付ける名前が重複されにくい名前にしておくこと。</p>

<p><code>controller</code>に名前を付けずに、直接 function を記述することもできる。</p>

<p>``` javascript
.directive(&lsquo;tabset&rsquo;, function() {
  return {</p>

<pre><code>...,
controller: ['$scope', function($scope) {
  // ...
}],
...
</code></pre>

<p>  };
})
```</p>

<p><code>$scope</code>だけでなく<code>$http</code>や<code>$timeout</code>などをインジェクト（DI）できる。また、directive の<code>controller</code>では<code>$element</code> <code>$attrs</code> <code>$transclude</code>の service をインジェクトできるようになっている。</p>

<p><code>link</code>でも<code>controller</code>でも、どちらでも同じような処理を記述することができそうに思う。違う点は、DI を利用できるか否かと、処理のタイミング（<code>controller</code>が先で、<code>link</code>が後）。使い分けのヒントとしては、子要素など別の directive から呼び出すのであれば<code>controller</code>として API を公開する感じで実装し、そうでなければ<code>link</code>で実装するという感じで。</p>

<h2>require</h2>

<p>ネストされた directive から親の directive の<code>controller</code>で定義された API を呼び出すには<code>require</code>が必要となる。</p>

<p>上のコード例では、<code>require: '^tabset'</code>の記述があり、これによって<code>tabset</code> directive の<code>controller</code>である<code>tabsetCtrl</code>を参照して API を利用できるようになる。</p>

<p>``` javascript
compile: function(elm, attrs, transclude) {
  return function postLink(scope, elm, attrs, tabsetCtrl) {</p>

<pre><code>tabsetCtrl.select(scope);
tabsetCtrl.addTab(scope);
tabsetCtrl.removeTab(scope);
</code></pre>

<p>  };
}
```</p>

<p>なお、<code>^</code>を付けない場合、親階層ではなく directive を指定した要素の<code>controller</code>を探すこととなる。このケースでよく使うのは<code>require: 'ngModel'</code>で、directive と同じ要素に<code>ng-model="..."</code>の記述があることを前提として実装できることになる。</p>

<p>同じ要素に<code>ng-model</code>属性の記述が無い場合、こんなエラーになる。</p>

<p><code>
Error: [$compile:ctreq] Controller 'ngModel', required by directive 'input', can't be found!
</code></p>

<p>このエラーを発生させる必要が無いなら、<code>require: '?ngModel'</code>のように<code>?</code>を付けて記述する。</p>

<h2>これでもうカスタム directive を書ける</h2>

<p>この４回目で<code>controller</code>と<code>require</code>を使って、複数の directive でコンポーネントを構成することについての理解も進んだので、どんどん directive を活用していこう！</p>
]]></content>
  </entry>
  
</feed>
