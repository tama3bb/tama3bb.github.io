<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: AngularJS | AngularJS Ninja]]></title>
  <link href="http://angularjsninja.com/blog/categories/angularjs/atom.xml" rel="self"/>
  <link href="http://angularjsninja.com/"/>
  <updated>2014-07-29T09:04:28+09:00</updated>
  <id>http://angularjsninja.com/</id>
  <author>
    <name><![CDATA[Akihito Tamagawa]]></name>
    <email><![CDATA[tama3bb@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[AngularJS styleguide 日本語訳]]></title>
    <link href="http://angularjsninja.com/blog/2014/07/29/angularjs-styleguide-in-Japanese/"/>
    <updated>2014-07-29T08:22:55+09:00</updated>
    <id>http://angularjsninja.com/blog/2014/07/29/angularjs-styleguide-in-Japanese</id>
    <content type="html"><![CDATA[<p><a href="https://twitter.com/toddmotto">@toddmotto</a> さんが AngularJS styleguide を GitHub に上げてました。</p>

<blockquote class="twitter-tweet" data-cards="hidden" lang="ja"><p>Open sourced my opinionated AngularJS styleguide on GitHub: <a href="https://t.co/g2BPwkUXuS">https://t.co/g2BPwkUXuS</a> <a href="https://twitter.com/hashtag/angular?src=hash">#angular</a> <a href="https://twitter.com/hashtag/javascript?src=hash">#javascript</a></p>&mdash; Todd Motto (@toddmotto) <a href="https://twitter.com/toddmotto/statuses/493406283887050753">2014, 7月 27</a></blockquote>


<script async src="http://angularjsninja.com//platform.twitter.com/widgets.js" charset="utf-8"></script>


<h3>AngularJS styleguide 日本語訳</h3>

<p>この AngularJS styleguide を Fork し、『<a href="https://github.com/tama3bb/angularjs-styleguide">AngularJS スタイルガイド</a>』として日本語に訳しておきました。</p>

<h3>JavaScript Style Guide</h3>

<p>なお、JavaScript のスタイルガイドについては、Airbnb の <a href="https://github.com/airbnb/javascript">JavaScript Style Guide</a> がお気に入りです。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AngularJS Ionic Firebase で作るモバイルチャットアプリ]]></title>
    <link href="http://angularjsninja.com/blog/2014/02/17/angularjs-ionic-firebase/"/>
    <updated>2014-02-17T02:15:39+09:00</updated>
    <id>http://angularjsninja.com/blog/2014/02/17/angularjs-ionic-firebase</id>
    <content type="html"><![CDATA[<p>この週末、オリンピックを見ながら日本人が出てくるまでヒマだったりしたので、ふとモバイルチャットでも作ってみるかと思い立ってダラダラとやってみました。</p>

<p>数時間しかかけてないので「ザ・未完成」なデキですが、サクッとリアルタイムなモバイルチャットアプリケーションを作れてしまうのは、なんともラクチンで楽しい。</p>

<h2>利用した技術</h2>

<ul>
<li><a href="http://angularjs.org/">AngularJS</a></li>
<li><a href="http://ionicframework.com/">Ionic</a></li>
<li><a href="https://www.firebase.com/">Firebase</a></li>
</ul>


<p>Ionic についてはこれまでにブログで、書いてないや…。Firebase については<a href="/blog/2013/09/01/angularfire-realtime-chat-app/">ずいぶん前に</a>。</p>

<!-- more -->


<h2>モバイルチャットアプリ</h2>

<p>リアルタイム処理は Firebase まかせ。見た目は Ionic ベースで少し CSS をいじった程度。認証はとりあえず付けなかったので、サムネイルには AngularJS Ninja のをずっと出しちゃってます。</p>

<p>iPhone や Android から、以下のアドレスを表示して試していただくのがオススメです。</p>

<p><a href="http://ionic-fire.firebaseapp.com/">http://ionic-fire.firebaseapp.com/</a></p>

<iframe src="http://ionic-fire.firebaseapp.com/" height="568" width="320" frameborder="0" style="border: 3px double #aaa;"></iframe>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[非活性（ng-disabled）にしてもaタグのボタンだとng-click動くので注意]]></title>
    <link href="http://angularjsninja.com/blog/2014/02/06/anchor-with-ngdisabled-caveat/"/>
    <updated>2014-02-06T15:29:21+09:00</updated>
    <id>http://angularjsninja.com/blog/2014/02/06/anchor-with-ngdisabled-caveat</id>
    <content type="html"><![CDATA[<hr />

<h2>Bootstrap のボタン</h2>

<p><a href="http://getbootstrap.com">Bootstrap</a> ベースのボタンに<code>ng-click</code>を記述する（form を submit しない）コードは、主に以下の 2 通りある。</p>

<p><code>html
&lt;button type="button" class="btn" ng-click="handleClick()"&gt;Done&lt;/button&gt;
&lt;a href="#" class="btn" ng-click="handleClick()"&gt;Done&lt;/a&gt;
</code></p>

<p>どちらでも見た目は同じになるし、イベント処理は<code>ng-click</code>がやってくれるし、<code>&lt;a&gt;</code>のほうがコードは短くなるしって感じで、どっちも一緒なんだし<code>&lt;a&gt;</code>にしとこってノリでやってると、<code>disabled</code> のワナにハマるかも。</p>

<!-- more -->


<h2>aタグの場合、ng-disabled で非活性にできるのは見た目だけ</h2>

<p>ボタンを非活性にするための AngularJS 標準 directive に、<a href="http://docs.angularjs.org/api/ng.directive:ngDisabled"><code>ng-disabled</code></a>がある。これを使うと、<code>ng-disabled="true"</code>となるときにボタンが非活性になってくれる。</p>

<p><code>html
&lt;button type="button" class="btn" ng-click="handleClick()" ng-disabled="aForm.$invalid"&gt;Done&lt;/button&gt;
&lt;a href="#" class="btn" ng-click="handleClick()" ng-disabled="aForm.$invalid"&gt;Done&lt;/a&gt;
</code></p>

<p>ここで注意が必要なのは、<code>&lt;a&gt;</code>のほうは<code>ng-disabled="true"</code>で非活性になっているときでも、ボタンクリックで<code>ng-click</code>の処理が走るという点。見た目が非活性になっているので、<code>ng-click</code>のほうも制御してくれているだろうと期待して（思い込んで）しまう。</p>

<p>そんなわけで、<code>&lt;a&gt;</code>タグに<code>ng-disabled</code>を使うときは注意しよう。<code>&lt;button type="button"&gt;</code>に変えるか、どうしても<code>&lt;a&gt;</code>タグでいくなら<code>ng-click="!aForm.$invalid &amp;&amp; handleClick()"</code>とかってしときましょう…。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AngularJSのng-ifで文字列を使うなら !! を付けよう]]></title>
    <link href="http://angularjsninja.com/blog/2014/02/05/ngif-string-caveat/"/>
    <updated>2014-02-05T17:44:16+09:00</updated>
    <id>http://angularjsninja.com/blog/2014/02/05/ngif-string-caveat</id>
    <content type="html"><![CDATA[<hr />

<h2>&lsquo;0&rsquo; が表示されない…</h2>

<p><code>ng-if</code> あるいは、<code>ng-show</code>や<code>ng-hide</code>を使うときに、string 値の有無で表示判定を記述することもある。</p>

<p>
``` html</p>

<p ng-if="model.value">{{model.label}}</p>


<p>```
</p>

<p>そんなとき、<code>model.value</code>の値が<code>'0'</code>だったらどうなるか。</p>

<p>なんと、表示されない…。</p>

<!-- more -->


<h2>&lsquo;0&rsquo; だけじゃない</h2>

<p>この現象、<code>'0'</code>だけでなく、<code>'f'</code> <code>'no'</code> <code>'n'</code>といった文字列（大文字・小文字問わず）の場合であっても表示されない。</p>

<p>angular.js のコードはこうなってる。</p>

<p>``` javascript
function toBoolean(value) {
  if (typeof value === &lsquo;function&rsquo;) {</p>

<pre><code>value = true;
</code></pre>

<p>  } else if (value &amp;&amp; value.length !== 0) {</p>

<pre><code>var v = lowercase("" + value);
value = !(v == 'f' || v == '0' || v == 'false' || v == 'no' || v == 'n' || v == '[]');
</code></pre>

<p>  } else {</p>

<pre><code>value = false;
</code></pre>

<p>  }
  return value;
}
```</p>

<h2>boolean にしちゃっておこう</h2>

<p>ということで、文字列の有無で判定させたいだけってときは<code>!!</code>を付けときましょう。boolean とか object の場合でも<code>!!</code>付ける方針にしとくのがラクでいいかな。</p>

<p>
``` html</p>

<p ng-if="!!model.value">{{model.label}}</p>


<p>```
</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AngularJS で HTTP ヘッダを設定するには]]></title>
    <link href="http://angularjsninja.com/blog/2014/02/04/angularjs-http-headers/"/>
    <updated>2014-02-04T16:08:51+09:00</updated>
    <id>http://angularjsninja.com/blog/2014/02/04/angularjs-http-headers</id>
    <content type="html"><![CDATA[<hr />

<h2>HTTP Headers を設定</h2>

<p>AngularJS による HTTP リクエストについては、<code>$httpProvider.defaults.headers</code>オブジェクトで HTTP ヘッダ情報を設定できる。</p>

<p><code>javascript
$httpProvider.defaults.headers.common.Authorization = '...';
</code></p>

<p>以下のように、get だけ、post だけに適用することも。</p>

<p><code>javascript
$httpProvider.defaults.headers.get['Authorization'] = '...';
$httpProvider.defaults.headers.post = { 'Authorization' : '...' };
</code></p>

<p>（複数の書き方を例示するために、わざと違った書き方にしてます）</p>

<!-- more -->


<h2>Cache-Control の設定例</h2>

<p>IE は XHR (Ajax) リクエストでもキャッシュするようなので、IE をサポートするのであれば初めから Cache-Control などの設定を入れておくのがいいのかも。</p>

<p><code>javascript
$httpProvider.defaults.headers.common['Cache-Control'] = 'no-cache';
</code></p>

<p>他にも If-Modified-Since を設定する必要がありそう。あるいは Expires のほうが適切なのかも。ここの設定について詳しい方、こっそり教えてください！</p>
]]></content>
  </entry>
  
</feed>
