<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[AngularJS Ninja Blog]]></title>
  <link href="http://angularjsninja.com//atom.xml" rel="self"/>
  <link href="http://angularjsninja.com//"/>
  <updated>2015-05-20T20:08:07+09:00</updated>
  <id>http://angularjsninja.com//</id>
  <author>
    <name><![CDATA[Akihito Tamagawa]]></name>
    <email><![CDATA[tama3bb@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Angular カンファレンス（ng-conf 2015）のスライドまとめ]]></title>
    <link href="http://angularjsninja.com//blog/2015/03/09/slides-at-ngconf-2015/"/>
    <updated>2015-03-09T12:10:46+09:00</updated>
    <id>http://angularjsninja.com//blog/2015/03/09/slides-at-ngconf-2015</id>
    <content type="html"><![CDATA[<p>Angular カンファレンス <a href="http://www.ng-conf.org">ng-conf 2015</a> が 3/5 〜 3/6 に開催されていました。</p>

<p>スライドを捕捉でき次第、リンクを追加していきます。動画は <a href="https://www.youtube.com/channel/UCm9iiIfgmVODUJxINecHQkA">YouTube</a> のほうで視聴できます。</p>

<h2>Thursday</h2>

<p><a href="https://docs.google.com/presentation/d/1d03YJ1gKhMZkV-87m9lsS_gnXASVDdSfYvuvzHIro6g/pub?start=false&amp;loop=false&amp;delayms=3000&amp;slide=id.p">Day 1 Keynote</a>
&mdash; Brad Green &amp; Igor Minar</p>

<!-- more -->


<p><a href="https://docs.google.com/presentation/d/1_3JH2nlubaktyaKzWo7ikBP2QWzaK1w7IEfLDH_x3lU/edit#slide=id.p">State of Angular 1</a>
&mdash; Pawel Kozlowski &amp; Lucas Galfaso</p>

<p><a href="https://docs.google.com/presentation/d/1UtlOESedCKC1bHnx0F0w8LzFzVh4BOMr9g6GfCSR-Lw/edit#slide=id.p">The New Router</a>
&mdash; Brian Ford</p>

<p><a href="https://docs.google.com/presentation/d/1NUkSRbc3MtuDCCy0PgVYitjFaGxEoE5ozwyq5QujXy4/pub?start=false&amp;loop=false&amp;delayms=60000&amp;slide=id.g7a1e9ddbe_068">Prototyping with Angular? YES!!</a>
&mdash; Kelly Knight &amp; Dirk Ginader</p>

<p><a href="https://docs.google.com/presentation/d/1kN0k67_dqcuTNkCwvltkrzn_QxrN5ktibAKDfd2FAjQ/edit?usp=sharing">Fast from the Start</a>
&mdash; Jeff Cross</p>

<p><a href="https://docs.google.com/presentation/d/1SZ05jFRF9Rfsrn39z5-vdyLbY37XZGEgQfZ1uIOaEEo/pub?start=false&amp;loop=false#slide=id.g6326acee8_1314">Creating Container Components in Web Components and Angular</a>
&mdash; Kara Erickson &amp; Rachael L Moore</p>

<p><a href="http://zizzamia.github.io/building-high-performance-measurable-directives/">#ngTasty</a>
&mdash; Leonardo Zizzamia</p>

<p>TypeScript and ES6
&mdash; Dan Wahlin &amp; Andrew Connell</p>

<p><a href="https://presentate.com/judytuna/talks/angular-and-community">Make more Angular devs now! Community-building how-to</a>
&mdash; Judy Tuan</p>

<p><a href="https://docs.google.com/presentation/d/1QeCGTQhyCbKakXG5ZtorhvqtBPjOl2sAori5Zn_LqVk/edit#slide=id.g7a9960ce0_030">ng-wat</a>
&mdash; Shai Reznik</p>

<p><a href="https://docs.google.com/presentation/d/1V8sRYKiEfXtD0fNYKHUQPAni70IpZxrRKuX0V4UHDD4/view#slide=id.p">Accessibility Testing Made Easy</a>
&mdash; Julie Ralph</p>

<p>Why Realtime Matters
&mdash; James Tamplin</p>

<p><a href="http://slides.com/kentcdodds/ng-model-options-in-5-minutes#/">ng-model-options in 5 minutes</a>
&mdash; Kent C. Dodds</p>

<p>How to Teach Angular to your Kids
&mdash; Katya Eames</p>

<p><a href="http://slides.com/bahmutov/run-digest-cycle-in-web-worker#/">Run digest cycle in web worker</a>
&mdash; Dr. Gleb Bahmutov PhD.</p>

<p>$asqwatch is real
&mdash; William Scott Moss</p>

<p><a href="http://adamdbradley.github.io/ionic-present/#/">Ionic + Angular: Superpowers for Mobile App Development</a>
&mdash; Adam Bradley</p>

<p><a href="https://drive.google.com/file/d/0B8xFJE4iy3aXUGZXSEhEQURfNFk/view">Angular Behind The Scenes</a>
&mdash; Rodric Haddad</p>

<h2>Friday</h2>

<p><a href="https://docs.google.com/presentation/d/1XoizA8Dm_S3SU1jYPERmgWVIbqjGOXolpF3Jm2b8xKA/edit#slide=id.p">Angular 2</a>
&mdash; Miško Hevery &amp; Rado Kirov</p>

<p>Binding to the Cloud with Falcor
&mdash; Jafar Husain</p>

<p>TypeScript and Angular 2.0
&mdash; Jonathan Turner</p>

<p><a href="http://slides.yearofmoo.com/ng-conf-2015/index.html?now123#/0/0/">What&rsquo;s new in ngAnimate</a>
&mdash; Matias Niemelä</p>

<p>Building Platforms with Angular
&mdash; Jen Bourey</p>

<p><a href="http://mgonto.github.io/reactive-all-the-things-talk/#1">Reactive all the things</a>
&mdash; Ben Lesh &amp; Martin Gontovnikas</p>

<p><a href="http://mzgol.github.io/slides/ng-1-meets-ng-2/#/">Angular 1 meets Angular 2</a>
&mdash; Michał Gołębiowski</p>

<p>Digging into Angular Style Guide Decisions
&mdash; John Papa</p>

<p><a href="https://pascalprecht.github.io/slides/better-i18n-for-your-angular-apps/#/">Better i18n for your Angular apps</a>
&mdash; Chirayu Krishnappa &amp; Pascal Precht</p>

<p><a href="http://www.slideshare.net/simpul/badges-we-dont-need-no-stinkin-badges-45618638">Badges? We don&rsquo;t need no stinkin&#8217; badges!</a>
&mdash; Lukas Ruebbelke &amp; Geoff Goodman</p>

<p><a href="https://docs.google.com/presentation/d/1ur3bCJrV1e57kJQdasfdAtjNJX2nDRUJ5c587PkaIFw/edit#slide=id.p">Build a Material App</a>
&mdash; Thomas Burleson &amp; Naomi Black</p>

<p><a href="http://bit.ly/1Md6f8W">Angular + React = Speed</a>
&mdash; Dave Smith</p>

<p><a href="https://docs.google.com/presentation/d/12Y7FD_HJDCYSgj3Bvcd8FXH9y6UI9VfV5tsXPDiW2DE/edit#slide=id.g7a0f6ac65_2_0">Change Detection Reinvented</a>
&mdash; Victor Savkin</p>

<p><a href="https://docs.google.com/presentation/d/1T7OxS3thM0-DyZnpfvjxXd-NytvSFVRTc5vQZui5QYc/pub?start=false&amp;loop=false&amp;delayms=3000&amp;slide=id.g8c9a1b604_2_18">(super)Power Management</a>
&mdash; Igor Minar</p>

<p>Angular Team Panel/QA
&mdash; Googlers</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Angular 1.4.0 は 2015 年の春にリリース]]></title>
    <link href="http://angularjsninja.com//blog/2014/12/16/planning-angular-1.4/"/>
    <updated>2014-12-16T12:06:25+09:00</updated>
    <id>http://angularjsninja.com//blog/2014/12/16/planning-angular-1.4</id>
    <content type="html"><![CDATA[<p>AngularJS 1.4.0 のリリースは来春 2015 年 3 月頃になるようですね。</p>

<p>公式ブログの記事『<a href="http://angularjs.blogspot.jp/2014/12/planning-angular-14.html">Planning Angular 1.4</a>』を日本語訳しておきました。</p>

<hr />

<h2>Planning Angular 1.4</h2>

<p>AngularJS 1.4 についてのミーティングを先週実施し、その概要をまとめています。ミーティングの映像は YouTube でご覧いただけます。</p>

<h3>Release Schedule</h3>

<p>最初のリリースとなる 1.4.0 を、2015 年 3 月 5 日の <a href="http://www.ng-conf.org/">ng-conf</a> にあわせて、2015 年の春を予定しています。1.3.x は継続的にリリースしていきます。</p>

<h3>Work Planning</h3>

<p>GitHub でコミュニティの関心が高い issues と PRs から、1.4 への提案機能のリスト <a href="https://docs.google.com/spreadsheets/d/1ihM8ORf8v38qAbnzJM4TiCqdKeCRz_1VO9JPjSpPWKU/edit?usp=sharing">spreadsheet</a> を Lucas が作成しました。大きな機能や、重大な変更 (breaking changes)、新しい API について記載しています。ミーティングの大半の時間は、これらの機能について Angular 1.x で対応すべきか、どのリリースにするか、誰が担当するかについて話し合いました。</p>

<h3>1.4 Targets</h3>

<p>1.4 で予定している機能について <a href="https://docs.google.com/spreadsheets/d/1F4JmM25GeaVWLv7oaJrmfFZoE8ioepqNZQKd6xx_Jc4/edit?usp=sharing">tracking spreadsheet</a> を作成しています。</p>

<p>1.4 の主要なテーマは以下のとおりです。</p>

<ul>
<li><strong>Router</strong> &ndash; <em>Brian</em> &ndash; Angular 1 と 2 で対応する新しい router &ndash; <a href="https://docs.google.com/document/d/1-DBXTHaeec6XH5qx2tKVrgrjiILy76_lSrjgJv95RJ4/edit#">Progress</a></li>
<li><strong>I18N</strong> &ndash; <em>Chirayu</em> &ndash; ファーストクラスの国際化対応 &ndash; <a href="https://docs.google.com/document/d/1mwyOFsAD-bPoXTk3Hthq0CAcGXCUw-BtTJMR4nGTY-0/edit?usp=sharing">Design Doc</a></li>
<li><strong>Forms</strong> &ndash; <em>Martin</em> &ndash; 簡単に使えて保守性の高い parsing / formatting / validation &ndash; <a href="https://drive.google.com/open?id=1-MhomULgCFOXVsqAGrI7l-cXYMYmJM4BMzgy_anC93o&amp;authuser=0">Design Doc</a></li>
<li><strong>HTTP</strong> &ndash; <em>Pawel</em> &ndash; <code>$http</code> サービスの改善 (serialization, JSON parsing, testing mock DSL)</li>
<li><strong>Parser</strong> &ndash; <em>Lucas</em> &ndash; <code>$parse</code> サービスのパフォーマンス改善</li>
<li><strong>Documentation</strong> &ndash; <em>Caitlin</em> &ndash; Material Design を使ってドキュメントのデザインを再設計</li>
</ul>


<!-- more -->


<p>加えて、以下の重要または重大な変更 (breaking changes) を含めることを計画しています。</p>

<ul>
<li><strong><code>$injector</code></strong> &ndash; <em>Brian</em> &ndash; module を再定義しているとエラーを投げることで、バグを早期に発見 (<a href="https://github.com/angular/angular.js/issues/1779">#1779</a>)</li>
<li><strong><code>$compile</code></strong> &ndash; <em>Igor</em> &ndash; より簡単にコンポーネントタイプの directive を定義するために、新しく module.component ヘルパーを提供 (<a href="https://github.com/angular/angular.js/issues/10007">#10007</a>)</li>
<li><strong><code>$compile</code></strong> &ndash; <em>Caitlin</em> &ndash; オプショナルでない isolated scope のマッピングに対応する属性を記述漏れしているとエラーを投げる (<a href="https://github.com/angular/angular.js/pull/9216">#9216</a>)</li>
<li><strong>Project layout / Modularity</strong> &ndash; <em>Pete</em> &ndash; angular.js をさらに小さなオプショナルのモジュール／ファイルに分割し、ノンオプショナルなコアのファイルサイズを小さくする（モバイルのユースケースで有益）</li>
</ul>


<h2>Github Milestones and Labels</h2>

<p>master ブランチでの 1.4.x の開発を開始します。進行中の開発用に新しい labels と milestones があります。</p>

<p><em>Milestones:</em></p>

<ul>
<li>1.4.x &ndash; 1.4 で計画されている issues と pull requests 用</li>
</ul>


<p><em>Labels:</em></p>

<ul>
<li>branch: 1.2.x (replaces stable: yes)</li>
<li>branch: 1.3.x (replaces stable: no)</li>
<li>branch: 1.4.x (replaces 1.4 &ndash; for triaging 1.4.x issues and PRs)</li>
<li>Primary Focus: (new for items that we are focusing on for 1.4 &ndash; i.e. the stuff in the tracking spreadsheet)</li>
</ul>


<h2>Other Versions and Backporting</h2>

<ul>
<li>master ブランチ (1.4.x) はフォーカスの大部分を受け取る</li>
<li>1.3.x ブランチはマスターからバックポートしたバージョン特有の修正を受け取る</li>
<li>1.2.x ブランチはセキュリティの問題と重要なリグレッションの修正のみ受け取る</li>
</ul>


<h2>Video</h2>

<p>設計と開発について透明かつオープンであるための継続的な活動として、このミーティングの録画を公開しています。<a href="https://www.youtube.com/watch?v=Uae9_8aFo-o">https://www.youtube.com/watch?v=Uae9_8aFo-o</a></p>

<iframe width="560" height="315" src="http://angularjsninja.com///www.youtube.com/embed/Uae9_8aFo-o?rel=0" frameborder="0" allowfullscreen></iframe>


<h2>Just the Beginning</h2>

<p>1.4 の計画はまだ始まったばかりです。上述した概要に加えて、GitHub で 1.4 への追加提案を歓迎しています。1.4.0 をリリース後は、1.4.0 で入らなかった non-breaking な変更のために 1.4.x のリリースを継続していきます。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[（日本語訳）ng-europe, Angular 1.3, and beyond]]></title>
    <link href="http://angularjsninja.com//blog/2014/10/28/ngeurope-angular1.3-and-beyond-in-japanese/"/>
    <updated>2014-10-28T16:12:47+09:00</updated>
    <id>http://angularjsninja.com//blog/2014/10/28/ngeurope-angular1.3-and-beyond-in-japanese</id>
    <content type="html"><![CDATA[<p>AngularJS 公式ブログの記事 <a href="http://angularjs.blogspot.jp/2014/10/ng-europe-angular-13-and-beyond.html">ng-europe, Angular 1.3, and beyond</a> を日本語訳しておきました。</p>

<hr />

<p>先週、パリで開催した <a href="http://ngeurope.org">ng-europe</a> において、Angular の過去、現在、そして未来について発表しました。このブログポストでは、重要なポイントとお知らせについてまとめています。</p>

<h2>Angular 1.3</h2>

<p>リリースしたばかりの新しい AngularJS 1.3 では、AngularJS 1.2 には無かった多くの機能と改善が含まれています。</p>

<ul>
<li>パフォーマンス：DOM 操作や digest など多くの処理が 3 &ndash; 4 倍高速化し、アプリケーションが軽快に動作します。</li>
<li>フォーム：シンプルな API となり、フォームバリデーションのコードを短く記述できます。</li>
<li>ARIA サポート：<a href="https://docs.angularjs.org/api/ngAria">ngAria</a> により、スクリーンリーダーなどの支援ソフトウェアをサポートする適切な ARIA 属性を追加・削除できます。</li>
<li>Material Design：ユーザインターフェイスデザインとインタラクションのための <a href="http://www.google.com/design/spec/material-design/introduction.html">Google&rsquo;s specification</a> をほぼ完全に機能するよう実装しています。詳しくは <a href="https://material.angularjs.org">material.angularjs.org</a> で。</li>
</ul>


<p>Web アプリケーションを実装しているなら、このバージョンを使ってください。Angular 1.x で構築された Google の 1,600 を超えるアプリケーションで、長期間にわたってこのバージョンを最上位としてサポートしていくことをコミットしています。</p>

<p>Angular 1.x で予定していた新機能と breaking changes については、一部の例外を除いて 2.0 に先送りし、新しい設計をベースに取り組んでいきます。PRs（プルリクエスト）のレビューと issues への返答を続けてはいますが、1.x については、機能よりも安定性、セキュリティ、性能をより重視していきます。</p>

<p>Angular 1.2 をお使いであれば、コードを 1.3 に移行する方法について <a href="https://docs.angularjs.org/guide/migration">migration instructions</a>（<a href="http://angularjsninja.com/blog/2014/10/15/migrating-from-1.2-to-1.3-in-Japanese/">日本語</a>）を確認してください。</p>

<!-- more -->


<h2>From 1.3 to 2.0: Angular&rsquo;s Next Step</h2>

<p>1 月に開催した <a href="http://ng-conf.org">ng-conf</a> の <a href="https://www.youtube.com/watch?v=r1A1VR0ibIQ">keynote</a> で、Angular 2 の計画について発表しました。それ以降の数か月にわたり、Angular にとっての次の進化となるステップについてブレインストーミングを繰り返してきました。3 月には<a href="http://angularjs.blogspot.jp/2014/03/angular-20.html">デザインドキュメントで考えを発表</a>し、フィードバックから Angular がどう使われ、どう使いたいと考えられているかを確認し、様々なアプローチ、プロトタイプ、ベンチマーク、デザインを繰り返し、ベストを求めてきました。</p>

<p>先週の <a href="http://ngeurope.org">ng-europe</a> の場で、このリサーチとプロトタイプによる Angular 2.0 のビジョンについて発表し、Angular が本物の Angular（DI、HTML ベースのテンプレート、ディレクティブ、テスタビリティ）となることを見ていただけたと思います。一方で、Angular を近年の Web プラットフォームのシフト（web components や module system など）に適用させ、Angular を著しく高速化して使いやすくするためには、1.x からの段階的なステップでは実現できず、それに伴うデザイン変更が生じることも見ていただきました。</p>

<p>具体的な変更点：</p>

<ul>
<li>Angular 1.x の controllers と templates を包含する統一されたコンポーネントモデルにより、概念 (concepts) と定型 (boilerplate) を減らして再利用性を高める。</li>
<li>scope の概念を見直してシンプルでわかりやすくし、コンポーネント間の責任分担を改善。</li>
<li>モジュール化されたモバイルファーストなデザインで、エンタープライズレベルのデスクトップアプリケーションのニーズまでスケール。 &ndash; 世界人口の 50 % を超える人々が、デスクトップではなくモバイルでインターネットに接続しており、モバイル向けのアプリケーションを開発しやすくしたいと考えています。一方で、エンタープライズ分野ではデスクトップ Web アプリケーションの重要性も残り続けます。</li>
<li>Web Components サポート。1.x での Web プラットフォームについての前提はもはや有効ではなく、対応させるために Angular を変更していきます。</li>
<li>ES6 (with easy transpilation to ES5) で構築。つまり、現在のブラウザで未来の JavaScript のコードを書き始めることができます。あるいは、ES5 で Angular 2 アプリケーションを実装することもできます。</li>
<li><a href="https://docs.google.com/presentation/d/1hr2IM-8G-0RzpB-WY8pLHvxqNggKPzUO0KvEv1IKPws/edit#slide=id.p">AtScript を導入</a>。TypeScript シンタックスと ES6 を拡張し、実行時の型とアノテーションを追加することで、大きなチームが大規模なアプリケーションを構築し、ドキュメント化することを支援します。ES6 と同じように、アプリケーションの構築に AtScript は必須ではありません。</li>
<li>Angular は jqLite や DOM ラッパーに依存しない。DOM は 2009 年以来大幅に改善しており、AngularJS がラッパーに依存する必要はなく、ラッパーを無くすことでパフォーマンスも向上します。必要であればディレクティブに jQuery や他の DOM ライブラリを使うこともできます。</li>
</ul>


<p>これらのアイデアの多くは、Angular 開発者との<a href="https://drive.google.com/#folders/0B7Ovm8bUYiUDR29iSkEyMk5pVUk">ディスカッション</a>によるもので、ディスカッションに加わってくださった開発者の方々にあらためて感謝します！ 安定と性能を重視した <a href="http://angularjs.blogspot.jp/2014/10/angularjs-130-superluminal-nudge.html">AngularJS 1.3 をリリース</a>（<a href="http://angularjsninja.com/blog/2014/10/14/angularjs-1.3.0-released/">日本語</a>）した今、Angular 2.0 の構築に向けて進んでいきます。</p>

<h2>What does this mean for me?</h2>

<p>Angular コミュニティこそが、Angular を素晴らしいものにしています。2.0 の計画を早期に共有することで、コンセプトから実際のコードにしていくためのディスカッションに、多くの方々が参加していただけるようにしています。開発者の方々からの協力を必要としており、考えをお伺いできることを楽しみにしています。GitHub で issues を発行していただくか、Twitter (<a href="https://twitter.com/bradlygreen">Brad</a>, <a href="https://twitter.com/IgorMinar">Igor</a>, <a href="https://twitter.com/briantford">Brian</a>, <a href="https://twitter.com/jeffbcross">Jeff</a>) や <a href="https://plus.google.com/+AngularJS/posts">Google+</a> でご連絡ください。ミートアップにお越しいただいたり、<a href="https://drive.google.com/#folders/0BxgtL8yFJbacMEZDc2NtWS1VZ1k">ミーティングノート</a>のフォロー・コメントもお願いします。</p>

<h2>When can I use Angular 2.0?</h2>

<p>現在の実験的な状態にある Angular 2.0 であれば、<a href="http://github.com/angular/angular">GitHub</a> と<a href="https://drive.google.com/#folders/0BxgtL8yFJbacMEZDc2NtWS1VZ1k">ミーティングノート</a>でフォローしていただけます。2.0 のコードで何かを構築するには早すぎ、プロジェクトはまだ本当に初期の段階です。まだリリース日を発表できるような状態ではありませんが、初期のバージョンを少しでも早くリリースできるよう進めています。</p>

<h2>How can I learn more about Angular 2.0?</h2>

<p>まだ非常に初期の段階ですが、まず ng-europe (<a href="https://twitter.com/ngEurope/status/525966523496955904">when they are available</a>) のビデオを見ていただくことから始められるのが一番です。特に、2 日間それぞれの Keynote と、Angular 2 Core のセッションです。</p>

<p>時間を掛けて、より深い内容を見ていただけるなら、すべての<a href="https://drive.google.com/#folders/0B7Ovm8bUYiUDR29iSkEyMk5pVUk">デザインドキュメントとリサーチ</a>に目を通してみてください。</p>

<p>コードは GitHub の <a href="https://github.com/angular/angular">angular/angular</a> リポジトリにありますが、まだ初期の段階であり、数か月のうちに続々と増えていくことになります。</p>

<p>最後に、パートナーによって公開されているリソースについても確認してください。ES6 と Angular 2.0 についての <a href="http://blogs.msdn.com/b/typescript/archive/2014/10/22/typescript-and-the-road-to-2-0.aspx">TypeScript のブログ記事</a>や、<a href="https://github.com/google/traceur-compiler">Traceur</a>、<a href="http://wiki.ecmascript.org/doku.php?id=harmony:specification_drafts">EcmaScript 6</a>、<a href="http://webcomponents.org/">Web Components</a> です。</p>

<h2>What about Migrating from 1.3 to 2.0?</h2>

<p>Angular 2 のゴールは、既存 API との後方互換性に縛られることなく、Web アプリケーションを構築するための最高のツールセットにすることです。Angular 2 の最初のバージョンに合わせて、Angular 1 ベースのアプリケーションからの移行パスについての作業を始めます。</p>

<p>Angular で Web アプリケーションを実装するために、たくさんの時間を投資して学習してくださっていることを知っています。核となる概念のほとんどを維持していきますので、Angular 2 においても同じ知識を活かして短期間で熟練していただけます。</p>

<h2>What&rsquo;s next?</h2>

<p>ng-europe は Angular コミュニティにとって素晴らしいイベントでした。プレゼンテーションやデモは素晴らしく、またそれ以上に、通路などで交わされたすべてのインフォーマルな会話が大切なものでした。そして今、発表したアイデアをリアルなものとしていくために、<a href="https://github.com/angular/angular/">ご参加ください</a>。2.0 が開発中の間は、Angular 1.3 で素晴らしいアプリケーションを構築してください。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AngularJS カンファレンス（ng-europe 2014）のスライドまとめ]]></title>
    <link href="http://angularjsninja.com//blog/2014/10/24/slides-at-ngeurope-2014/"/>
    <updated>2014-10-24T10:05:33+09:00</updated>
    <id>http://angularjsninja.com//blog/2014/10/24/slides-at-ngeurope-2014</id>
    <content type="html"><![CDATA[<h2>Slides at ng-europe 2014</h2>

<p>10/22 〜 10/23 に、パリ（フランス）で AngularJS のカンファレンス <a href="http://ngeurope.org">ng-europe</a> が開催されていました。</p>

<p>捕捉できたスライドについてはリンクしています。抜けが多いですが、スライドを捕捉できしだい追加していきます。</p>

<h3>WEDNESDAY OCTOBER 22nd</h3>

<p>Igor Minar &amp; Brad Green &ndash; <a href="https://docs.google.com/presentation/d/1-M5U0B6JI2JKU2ibVmU-xKkR7a88Uz1ZN0pc2lEuGzE/edit#slide=id.p">Keynote</a></p>

<!-- more -->


<p>Jeff Cross &amp; Brian Ford &ndash; <a href="https://drive.google.com/file/d/0Bw6GBXhPGkUGcEVuQlFMQklnUTA/view">Angular 1.3</a></p>

<p>Andrew Joslin &ndash; Ionic Framework</p>

<p>Victor Berchet &amp; Rado Kirov &ndash; <a href="https://docs.google.com/presentation/d/1qKoCrd7YgwsRPT8z2e8ahsY-JZkP6-cXPfbDSLz_HgQ/pub?start=false&amp;loop=false&amp;delayms=3000&amp;slide=id.p">AngularDart under the hood</a></p>

<p>Vojta Jína &ndash; <a href="https://dl.dropboxusercontent.com/u/36607830/talks/2014-can-we-learn-from%20architects.pdf">Can We Learn from Architects?</a></p>

<p>Julien Bouquillon &ndash; <a href="http://blog.revolunet.com/ngeurope-angular-cordova/#1">Using AngularJS and Phonegap to build hybrid mobile applications</a></p>

<p>Thomas Burleson &amp; Max Lynch &ndash; <a href="http://angular-material.slides.com/tburleson/introducing-angular-material-design">Material Design</a></p>

<p>Pete Bacon Darwin &ndash; <a href="https://docs.google.com/presentation/d/10ROq66kEpcB8eEgSYxmzUB82Ydt2oS2kaO-sNodEMoY/pub?start=false&amp;loop=false&amp;delayms=3000&amp;slide=id.p">Dgeni &ndash; Documentation generation on steroids</a></p>

<p>Julie Ralph &amp; Chirayu Krishnappa &ndash; <a href="https://docs.google.com/presentation/d/1ITWsMDGd6ArrP6KbGRLLzS9f9NMnyqozIdjtaj0Ek2c/edit#slide=id.p">Protractor and the Testability API</a></p>

<p>Rob Eisenberg &ndash; <a href="http://www.slideshare.net/RobEisenberg/ngeurope-the-new-router">The new Router for AngularJS</a></p>

<p>Pawel Kozlowski &ndash; <a href="http://pkozlowski-opensource.github.io/ng-europe-2014/presentation/">ui-bootstrap</a></p>

<p>Matthieu Lux &ndash; <a href="https://github.com/Swiip/angular-from-scratch">Angular from scratch</a></p>

<p>Oliver Dore &ndash; <a href="http://www.slideshare.net/workandco/vx-ng-europe">Responsive Takes Flight: Building The First Responsive Airline Website</a></p>

<h3>WEDNESDAY OCTOBER 23rd</h3>

<p>Miško Hevery &ndash; <a href="https://docs.google.com/presentation/d/1hr2IM-8G-0RzpB-WY8pLHvxqNggKPzUO0KvEv1IKPws/mobilepresent?slide=id.g3e58cc2be_3300">Keynote</a></p>

<p>Igor Minar &amp; Tobias Bosch &ndash; <a href="https://docs.google.com/presentation/d/1XQP0_NTzCUcFweauLlkZpbbhNVYbYy156oD--KLmXsk/edit#slide=id.p">Angular 2.0 Core</a></p>

<p>Zack Brown &ndash; <a href="http://thomasstreet.com/ngeurope/">Famous Angular</a></p>

<p>Douglas Duteil &ndash; <a href="https://docs.google.com/presentation/d/1W-0qR2LDmdeAv_3uGC1w6HyB-8Zc6ANwx1WM5wJrsx0/edit#slide=id.g4e26e863f_179">Yet another way to animate in Angular</a></p>

<p>Martin Gontovnikas &ndash; <a href="http://mgonto.github.io/restangular20-ngeurope-talk/">Restangular 2.0: The future and beyond</a></p>

<p>Erik Arvidsson &amp; Vojta Jína &ndash; <a href="http://arv.github.io/ngeurope/#/">ES6 in Angular 2.0</a></p>

<p>Matias Niemelä &ndash; Animations (sequencer, web animations)</p>

<p>Lukas Ruebbelke &ndash; <a href="http://onehungrymind.com/slides/realtime-cage-dragon-with-firebase-angularjs-google.pdf">Be a Real Time Cage Dragon with AngularJS and Firebase</a></p>

<p>Carmen Popoviciu &amp; Pascal Precht &ndash; <a href="http://slidedeck.io/PascalPrecht/dont-stop-thinking-about-tomorrow">“Don’t stop thinking about tomorrow” &ndash; AngularJS and Web Components</a></p>

<p>Marcy Sutton &ndash; <a href="http://marcysutton.github.io/angular-a11y/#/">AngularJS Accessibility</a></p>

<p>Jeremy Elbourn &ndash; <a href="https://docs.google.com/presentation/d/1eOL6ZaT-WqqC5q5D_uwE2EJxKmdWmfmXkkD4T47iYHk/edit#slide=id.g4e203762d_065">Software Patterns and Design with AngularJS</a></p>

<p>Dave Smith &ndash; <a href="http://slides.com/djsmith/the-power-of-angular-q/#/">The Power of $q</a></p>

<p>Matias Woloski &amp; Martin Gontovnikas &ndash; <a href="https://speakerdeck.com/mgonto/make-your-spa-a-maximum-security-prison">Making your Angular app a maximum security prision</a></p>

<p>Ari Lerner &ndash; Building games with AngularJS</p>

<p>Brian Ford &ndash; <a href="https://docs.google.com/presentation/d/16RJPOvWMePMTkvDrugOakV9uyGFRMd3PZ3g5UofhfIY/edit#slide=id.p">Tooling</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AngularJS 1.3 新機能 ngModelOptions]]></title>
    <link href="http://angularjsninja.com//blog/2014/10/17/angularjs-1.3-ngmodeloptions/"/>
    <updated>2014-10-17T18:57:38+09:00</updated>
    <id>http://angularjsninja.com//blog/2014/10/17/angularjs-1.3-ngmodeloptions</id>
    <content type="html"><![CDATA[<p><a href="http://angularjsninja.com//blog/2014/10/14/angularjs-1.3.0-released/">AngularJS 1.3.0</a> で導入された新機能から、ng-model でのモデル更新を調整できる directive の <a href="https://docs.angularjs.org/api/ng/directive/ngModelOptions">ngModelOptions</a> について取り上げます。</p>

<h2>ngModelOptions</h2>

<p>すぐに覚えて使ってみるべきオプションは、<code>updateOn</code> と <code>debounce</code> ですね。</p>

<h3>updateOn</h3>

<p><code>updateOn</code> は、input などの UI に対するどのイベントの場合にモデルを更新するかを指定できます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="o">&lt;</span><span class="nx">input</span> <span class="nx">type</span><span class="o">=</span><span class="s2">&quot;text&quot;</span> <span class="nx">name</span><span class="o">=</span><span class="s2">&quot;userName&quot;</span>
</span><span class='line'>    <span class="nx">ng</span><span class="o">-</span><span class="nx">model</span><span class="o">=</span><span class="s2">&quot;user.name&quot;</span>
</span><span class='line'>    <span class="nx">ng</span><span class="o">-</span><span class="nx">model</span><span class="o">-</span><span class="nx">options</span><span class="o">=</span><span class="s2">&quot;{ updateOn: &#39;blur&#39; }&quot;</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>これで、blur（フォーカスが外れる）イベントまでは、この input で入力値を変更してもモデルに反映されなくなります。blur イベントではじめてモデル更新されます。</p>

<h3>debounce</h3>

<p><code>debounce</code> は、モデルの更新を待機しておく時間を、ミリ秒単位で指定できます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="o">&lt;</span><span class="nx">input</span> <span class="nx">type</span><span class="o">=</span><span class="s2">&quot;text&quot;</span> <span class="nx">name</span><span class="o">=</span><span class="s2">&quot;userName&quot;</span>
</span><span class='line'>    <span class="nx">ng</span><span class="o">-</span><span class="nx">model</span><span class="o">=</span><span class="s2">&quot;user.name&quot;</span>
</span><span class='line'>    <span class="nx">ng</span><span class="o">-</span><span class="nx">model</span><span class="o">-</span><span class="nx">options</span><span class="o">=</span><span class="s2">&quot;{ debounce: 1000 }&quot;</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>これで、変更から 1 秒（1,000 ミリ秒）経過後にモデルが更新されるようになります。変更から 1 秒経過するまでに別の変更があった場合には、待機中の更新処理は破棄されます。</p>

<!-- more -->


<h3>複数オプションの指定</h3>

<p>ngModelOptions は、以下のように複数のオプションを一度に指定できます。この指定は、モデル更新を 500 ミリ秒遅延させるが、blur イベントのみすぐに更新という意味になります。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">ng</span><span class="o">-</span><span class="nx">model</span><span class="o">-</span><span class="nx">options</span><span class="o">=</span><span class="s2">&quot;{ updateOn: &#39;default blur&#39;, debounce: {&#39;default&#39;: 500, &#39;blur&#39;: 0} }&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>使用上の注意</h3>

<p>ngModelOptions で <code>updateOn</code> や <code>debounce</code> を利用すると、input フィールドの入力値と、実際のモデルの値が異なっている状態が増えます。そのため、モデルのほうを変更するときには、関係する input フィールドに対して <code>$rollbackViewValue</code> を呼び出すことで、モデルの値と一致させ、遅延されている更新処理をキャンセルさせます。</p>

<p><code>$rollbackViewValue</code> function は、userForm.userName.$rollbackViewValue() のように参照して呼び出せます。</p>

<h3>submit イベントで更新完了</h3>

<p>待機中の更新処理は、<code>submit</code> イベントによって即座に実行されます。<code>ngClick</code> イベントはモデル更新前となるので、更新後のモデルにアクセスしたい場合には <code>ngSubmit</code> を利用します。</p>

<h3>ngModelOptions は子孫要素にも適用</h3>

<p>ngModelOptions は、input 要素に直接指定するだけでなく、祖先要素となる <code>form</code> などに指定することもできます。</p>

<h3>その他のオプション</h3>

<ul>
<li><code>allowInvalid</code></li>
</ul>


<p>invalid なモデル値を許容するか、undefined（デフォルト動作）にするかを boolean で指定。</p>

<ul>
<li><code>getterSetter</code></li>
</ul>


<p>getters/setters として <code>ngModel</code> に function をバインドするかを boolean で指定。</p>

<ul>
<li><code>timezone</code></li>
</ul>


<p><code>&lt;input type="date"&gt;</code> <code>&lt;input type="time"&gt;</code> の Date インスタンスを読み書きするときに利用するタイムゾーンを指定する。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AngularJS 1.3 新機能 ワンタイムバインディング]]></title>
    <link href="http://angularjsninja.com//blog/2014/10/16/angularjs-1.3-one-time-binding/"/>
    <updated>2014-10-16T08:40:32+09:00</updated>
    <id>http://angularjsninja.com//blog/2014/10/16/angularjs-1.3-one-time-binding</id>
    <content type="html"><![CDATA[<p><a href="http://angularjsninja.com//blog/2014/10/14/angularjs-1.3.0-released/">AngularJS 1.3.0</a> で導入された新機能から、ワンタイムバインディング (<a href="https://docs.angularjs.org/guide/expression#one-time-binding">One-time binding</a>) について取り上げます。</p>

<h2>One-time binding</h2>

<p>値が変わることのないデータまでも双方向データバインドされて、digest loop のたびに繰り返し変更監視されることで性能が劣化しやすかった大規模な AngularJS アプリケーションでの問題を解消できます。</p>

<p>1 回で使い捨てするデータバインドを定義できるようになり、監視 (watch) 対象を減らして digest loop を高速化し、アプリケーションの表示や操作の応答速度を高められる機能です。</p>

<p>One-time binding を指定すると、undefined のままである間は監視対象となり続け、digest loop の結果 undefined でなくなった時点で監視対象から外れます。null となった場合でも監視対象から外れます。</p>

<h4>使い方</h4>

<p><code>::</code> を付けるだけです。</p>

<!-- more -->




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// {{ ... }} の例</span>
</span><span class='line'><span class="p">{{</span><span class="o">::</span><span class="nx">user</span><span class="p">.</span><span class="nx">name</span><span class="p">}}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 属性の例</span>
</span><span class='line'><span class="o">&lt;</span><span class="nx">div</span> <span class="nx">ng</span><span class="o">-</span><span class="nx">bind</span><span class="o">=</span><span class="s2">&quot;::user.name&quot;</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// ng-repeat の例</span>
</span><span class='line'><span class="o">&lt;</span><span class="nx">li</span> <span class="nx">ng</span><span class="o">-</span><span class="nx">repeat</span><span class="o">=</span><span class="s2">&quot;result in ::results&quot;</span><span class="o">&gt;</span><span class="p">{{</span><span class="o">::</span><span class="nx">result</span><span class="p">.</span><span class="nx">title</span><span class="p">}}</span><span class="o">&lt;</span><span class="err">/li&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>ng-repeat への指定は配列に対して有効であって、配列に格納されているオブジェクトのプロパティ個々に対しては、それぞれで必要に応じて &#8220; などと one-time binding を指定することになります。</p>

<h2>Bindonce</h2>

<p>「そもそもこういう性能改善系の機能こそ JavaScript の実行速度が遅い IE 8 でこそ必要なのに、AngularJS 1.3 では IE 8 サポートがドロップされたし…。IE 8 をサポートしなきゃいけない自分には AngularJS 1.3 リリースなんかで盛り上がれやしないよ！」</p>

<p>とお嘆きのあなたには、<a href="https://github.com/Pasvaz/bindonce">Bindonce</a> です！</p>

<p>しばらく IE 8 をサポートし続けていくのであれば、この Bindonce の導入を検討しましょう。AngularJS 1.3.0 の新機能 One-time binding と同じように性能を改善できます。</p>

<h4>使い方</h4>

<p><code>bindonce.js</code> (<code>bindonce.min.js</code>) ファイルを読み込み、<code>angular.module('app', ['pasvaz.bindonce'])</code> というように <code>'pasvaz.bindonce'</code> を依存モジュールとして定義し、以下のようにコードを記述して使います。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="o">&lt;</span><span class="nx">ul</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="nx">li</span> <span class="nx">bindonce</span> <span class="nx">ng</span><span class="o">-</span><span class="nx">repeat</span><span class="o">=</span><span class="s2">&quot;person in Persons&quot;</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="nx">a</span> <span class="nx">bo</span><span class="o">-</span><span class="nx">href</span><span class="o">=</span><span class="s2">&quot;&#39;#/people/&#39; + person.id&quot;</span><span class="o">&gt;&lt;</span><span class="nx">img</span> <span class="nx">bo</span><span class="o">-</span><span class="nx">src</span><span class="o">=</span><span class="s2">&quot;person.imageUrl&quot;</span><span class="o">&gt;&lt;</span><span class="err">/a&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="nx">a</span> <span class="nx">bo</span><span class="o">-</span><span class="nx">href</span><span class="o">=</span><span class="s2">&quot;&#39;#/people/&#39; + person.id&quot;</span> <span class="nx">bo</span><span class="o">-</span><span class="nx">text</span><span class="o">=</span><span class="s2">&quot;person.name&quot;</span><span class="o">&gt;&lt;</span><span class="err">/a&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="nx">p</span> <span class="nx">bo</span><span class="o">-</span><span class="kr">class</span><span class="o">=</span><span class="s2">&quot;{&#39;cycled&#39;:person.generated}&quot;</span> <span class="nx">bo</span><span class="o">-</span><span class="nx">html</span><span class="o">=</span><span class="s2">&quot;person.description&quot;</span><span class="o">&gt;&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="err">/li&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/ul&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>bindonce</code> とか、<code>bo-*</code> で始まる directive に注目してください。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AngularJS: Migrating from 1.2 to 1.3 日本語訳]]></title>
    <link href="http://angularjsninja.com//blog/2014/10/15/migrating-from-1.2-to-1.3-in-Japanese/"/>
    <updated>2014-10-15T08:24:48+09:00</updated>
    <id>http://angularjsninja.com//blog/2014/10/15/migrating-from-1.2-to-1.3-in-Japanese</id>
    <content type="html"><![CDATA[<p><a href="http://angularjsninja.com/blog/2014/10/14/angularjs-1.3.0-released/">AngularJS 1.3.0 がリリース</a>されたので、移行ガイド (<a href="https://docs.angularjs.org/guide/migration#migrating-from-1-2-to-1-3">Migrating from 1.2 to 1.3</a>) のほうも日本語訳しておきました。</p>

<hr />

<h2>Migrating from 1.2 to 1.3</h2>

<h3>$parse</h3>

<p><em><a href="https://github.com/angular/angular.js/commit/77ada4c82d6b8fc6d977c26f3cdb48c2f5fbe5a5">prevent invocation of Function&rsquo;s bind, call and apply</a></em></p>

<p>angular 式の中では function の <code>.bind</code> <code>.call</code> <code>.apply</code> を呼び出せなくなりました。既存 function の振る舞いを予測できない形で変更させないようにするためです。</p>

<p><em><a href="https://github.com/angular/angular.js/commit/6081f20769e64a800ee8075c168412b21f026d99">forbid <code>__proto__</code> properties in angular expressions</a></em></p>

<p>angular 式の中では (deprecated) <code>__proto__</code> プロパティは動作しなくなりました。</p>

<p><em><a href="https://github.com/angular/angular.js/commit/48fa3aadd546036c7e69f71046f659ab1de244c6">forbid <code>__{define,lookup}{Getter,Setter}__</code> properties</a></em></p>

<p>angular 式の中では <code>__{define,lookup}{Getter,Setter}__</code> を利用できなくなりました。必要な場合は、危険でなくなるようにラップ／バインドして scope オブジェクトを通して利用してください。</p>

<p><em><a href="https://github.com/angular/angular.js/commit/528be29d1662122a34e204dd607e1c0bd9c16bbc">forbid referencing Object in angular expressions</a></em></p>

<p>angular 式の中では <code>Object</code> を利用できなくなりました。<code>Object.keys</code> が必要な場合は scope でアクセスできるようにしてください。</p>

<!-- more -->


<h3>Angular.copy</h3>

<p><em><a href="https://github.com/angular/angular.js/commit/b59b04f98a0b59eead53f6a53391ce1bbcbe9b57">preserve prototype chain when copying objects</a></em></p>

<p>コピー元オブジェクトの prototype をコピー先オブジェクトに適用するように <code>angular.copy</code> を変更しています。以前はプロトタイプチェーンのプロパティを直接コピーしていました。</p>

<p>コピー先オブジェクトの <code>hasOwnProperty</code> プロパティだけを iterate しても、prototype からのプロパティは含まれなくなり、より適切な振る舞いになっていると考えています。</p>

<p>もしアプリケーションがこの振る舞いに依存している場合は、オブジェクト（と継承プロパティ）のすべてのプロパティを <code>hasOwnProperty</code> でフィルタしないように iterate してください。</p>

<p><strong>この変更は IE 8 で動作しない機能を使っていることに注意してください。</strong>もし IE 8 で動作させたい場合は <code>Object.create</code> と <code>Object.getPrototypeOf</code> の polyfill を使ってください。</p>

<h3>core</h3>

<p><em><a href="https://github.com/angular/angular.js/commit/bdfc9c02d021e08babfbc966a007c71b4946d69d">drop the toBoolean function</a></em></p>

<p><code>'f'</code> <code>'0'</code> <code>'false'</code> <code>'no'</code> <code>'n'</code> <code>'[]'</code> は falsy として扱われず、JavaScript の falsy 値である <code>false</code> <code>null</code> <code>undefined</code> <code>NaN</code> <code>0</code> <code>""</code> のみ falsy として扱われるようになりました。</p>

<h3>$compile</h3>

<p><em><a href="https://github.com/angular/angular.js/commit/2cde927e58c8d1588569d94a797e43cdfbcedaf9">always error if two directives add isolate-scope and new-scope</a></em></p>

<p>1 つの要素に isolate scope と別の scope をリクエストするとエラーとなるように変更されました。変更前は、isolate でない scope の directive の次に、isolate な scope の directive という順でコンパイラが適用する場合には、2 つの directive が child scope と isolate scope をリクエストすることが可能でした。</p>

<p>順番にかかわらず、コンパイラはエラーとするようになりました。</p>

<p><code>$compile:multidir</code> エラーとなるようであれば、同じ要素で複数の directive が isolate と isolate でない scope をリクエストしていないかを確認し、コードを修正してください。</p>

<h3>NgModel</h3>

<p><em><a href="https://github.com/angular/angular.js/commit/1be9bb9d3527e0758350c4f7417a4228d8571440">ensure pattern and ngPattern use the same validator</a></em></p>

<p>ng-pattern (<code>ng-pattern="exp"</code>) あるいは pattern 属性 (<code>pattern=""</code>) で angular 式が使われて文字列として評価される場合、validator は正規表現オブジェクトのリテラル (<code>/abc/i</code>) として文字列を解析せず、文字列全体を正規表現としてしまいます。つまり、フラグが正規表現として正しく扱われません。この制限を回避するために、正規表現オブジェクトを angular 式の値に使用してください。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// before</span>
</span><span class='line'><span class="nx">$scope</span><span class="p">.</span><span class="nx">exp</span> <span class="o">=</span> <span class="s1">&#39;/abc/i&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// after</span>
</span><span class='line'><span class="nx">$scope</span><span class="p">.</span><span class="nx">exp</span> <span class="o">=</span> <span class="sr">/abc/i</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Scope</h3>

<p><em><a href="https://github.com/angular/angular.js/commit/8c6a8171f9bdaa5cdabc0cc3f7d3ce10af7b434d">change Scope#id to be a simple number</a></em></p>

<p>Scope#$id は文字列ではなく数値型となりました。この id は主にデバッグ目的で利用されており、他に影響を与えないものと考えています。</p>

<h3>forEach</h3>

<p><em><a href="https://github.com/angular/angular.js/commit/55991e33af6fece07ea347a059da061b76fc95f5">cache array length</a></em></p>

<p>forEach は配列の初期数だけ iterate するようになり、iteration 中に配列に追加されたアイテムは forEach の対象となりません。</p>

<p>この変更により、forEach が Array#forEach の動作により近くなりました。</p>

<h3>jqLite</h3>

<p><em><a href="https://github.com/angular/angular.js/commit/a196c8bca82a28c08896d31f1863cf4ecd11401c">data should store data only on Element and Document nodes</a></em></p>

<p>テキスト／コメントのノードにも jqLite のデータをセットできていましたが、jQuery と同じように要素とドキュメントのノードのみとなりました。</p>

<h3>$resource</h3>

<p><em><a href="https://github.com/angular/angular.js/commit/d3c50c845671f0f8bcc3f7842df9e2fb1d1b1c40">allow props beginning with $ to be used on resources</a></em></p>

<p><code>$resource</code> がプロパティを削除する挙動を期待している場合、手動で行う必要があります。</p>

<h3>angular.toJson</h3>

<p><em><a href="https://github.com/angular/angular.js/commit/c054288c9722875e3595e6e6162193e0fb67a251">only strip properties beginning with $$, not $</a></em></p>

<p><code>toJson</code> がプロパティを削除する挙動を期待していた場合、手動で行う必要があります。</p>

<h3>$compile</h3>

<p><em><a href="https://github.com/angular/angular.js/commit/eec6394a342fb92fba5270eee11c83f1d895e9fb">deprecate <code>replace</code> directives</a></em></p>

<p>要素を置き換える directive 定義の <code>replace</code> フラグは、Angular の次のメジャーバージョンで廃止されます。この機能は扱いにくい問題（属性をどのようにマージするか、など）があり、この機能が解決できることよりも多くの問題をもたらしています。また、Web Components では DOM にカスタム要素が存在するのが一般的です。</p>

<h3>$parse</h3>

<p><em><a href="https://github.com/angular/angular.js/commit/fa6e411da26824a5bae55f37ce7dbb859653276d">remove deprecated promise unwrapping</a></em></p>

<p>promise をアンラップする機能は 1.2.0-rc.3 で既に削除されています。</p>

<h3>Scope</h3>

<p><em><a href="https://github.com/angular/angular.js/commit/82f45aee5bd84d1cc53fb2e8f645d2263cdaacbc">$broadcast and $emit should set event.currentScope to null</a></em></p>

<p><code>$broadcast</code> と <code>$emit</code> は、イベントの伝播 (propagation) を終了した時点でイベントの <code>currentScope</code> プロパティを null にリセットするようになりました。<code>currentScope</code> プロパティに非同期にアクセスするコードは、<code>targetScope</code> を利用するようにしてください。</p>

<h3>jqLite</h3>

<p><em><a href="https://github.com/angular/angular.js/commit/d71dbb1ae50f174680533492ce4c7db3ff74df00">stop patching individual jQuery methods</a></em></p>

<p>jQuery の <code>detach()</code> メソッドは <code>$destroy</code> イベントをトリガーしなくなりました。要素に付けた Angular データを破棄したい場合は <code>remove()</code> を利用してください。</p>

<h3>$http</h3>

<p><em><a href="https://github.com/angular/angular.js/commit/ad4336f9359a073e272930f8f9bcd36587a8648f">remove deprecated responseInterceptors functionality</a></em></p>

<p>これまでは response interceptor を以下のようにも登録できました。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// register the interceptor as a service</span>
</span><span class='line'><span class="nx">$provide</span><span class="p">.</span><span class="nx">factory</span><span class="p">(</span><span class="s1">&#39;myHttpInterceptor&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">$q</span><span class="p">,</span> <span class="nx">dependency1</span><span class="p">,</span> <span class="nx">dependency2</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="kd">function</span><span class="p">(</span><span class="nx">promise</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">promise</span><span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">response</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="c1">// do something on success</span>
</span><span class='line'>      <span class="k">return</span> <span class="nx">response</span><span class="p">;</span>
</span><span class='line'>    <span class="p">},</span> <span class="kd">function</span><span class="p">(</span><span class="nx">response</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="c1">// do something on error</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="nx">canRecover</span><span class="p">(</span><span class="nx">response</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nx">responseOrNewPromise</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="k">return</span> <span class="nx">$q</span><span class="p">.</span><span class="nx">reject</span><span class="p">(</span><span class="nx">response</span><span class="p">);</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nx">$httpProvider</span><span class="p">.</span><span class="nx">responseInterceptors</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="s1">&#39;myHttpInterceptor&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>v1.1.4（4ae46814）で導入された API では以下のようになります。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$provide</span><span class="p">.</span><span class="nx">factory</span><span class="p">(</span><span class="s1">&#39;myHttpInterceptor&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">$q</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">response</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">response</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="c1">// do something on success</span>
</span><span class='line'>      <span class="k">return</span> <span class="nx">response</span><span class="p">;</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="nx">responseError</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">response</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="c1">// do something on error</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="nx">canRecover</span><span class="p">(</span><span class="nx">response</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nx">responseOrNewPromise</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="k">return</span> <span class="nx">$q</span><span class="p">.</span><span class="nx">reject</span><span class="p">(</span><span class="nx">response</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nx">$httpProvider</span><span class="p">.</span><span class="nx">interceptors</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="s1">&#39;myHttpInterceptor&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>この API の詳細は <a href="https://docs.angularjs.org/api/ng/service/$http#interceptors">interceptors</a> で確認してください。</p>

<h3>injector</h3>

<p><em><a href="https://github.com/angular/angular.js/commit/c0b4e2db9cbc8bc3164cedc4646145d3ab72536e">invoke config blocks for module after all providers</a></em></p>

<p>config ブロックは provider 登録の前に呼び出されていたため動作を制御可能でしたが、常に config よりも前に provider 登録されるようになったために動作を制御できなくなりました。</p>

<p>例：</p>

<p>以前は、以下のようなコードが動作していました。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">angular</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s1">&#39;foo&#39;</span><span class="p">,</span> <span class="p">[])</span>
</span><span class='line'><span class="p">.</span><span class="nx">provider</span><span class="p">(</span><span class="s1">&#39;$rootProvider&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">$get</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span> <span class="p">...</span> <span class="p">}</span>
</span><span class='line'><span class="p">})</span>
</span><span class='line'><span class="p">.</span><span class="nx">config</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">$rootProvider</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">$rootProvider</span><span class="p">.</span><span class="nx">dependentMode</span> <span class="o">=</span> <span class="s2">&quot;B&quot;</span><span class="p">;</span>
</span><span class='line'><span class="p">})</span>
</span><span class='line'><span class="p">.</span><span class="nx">provider</span><span class="p">(</span><span class="s1">&#39;$dependentProvider&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">$rootProvider</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="nx">$rootProvider</span><span class="p">.</span><span class="nx">dependentMode</span> <span class="o">===</span> <span class="s2">&quot;A&quot;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">$get</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="c1">// Special mode!</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">$get</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="c1">// something else</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>$rootProvider</code> と <code>$dependentProvider</code> の間にある config ブロックがアプリケーションの動作を変更できていましたが、これは今では 1 つのモジュール内では実現できなくなりました。</p>

<h3>ngModelOptions</h3>

<p><em><a href="https://github.com/angular/angular.js/commit/adfc322b04a58158fb9697e5b99aab9ca63c80bb">move debounce and updateOn logic into NgModelController</a></em></p>

<p>このコミットは <code>NgModelController</code> の API を変更しています。</p>

<ul>
<li><code>$setViewValue(value)</code> &ndash; このメソッドは <code>$viewValue</code> を変更しますが、これまでとは異なり、<code>$modelValue</code> の変更をすぐにはコミットしなくなり、関連する <code>ngModelOptions</code> directive で指定されたトリガーによってコミットされるようになりました。<code>ngModelOptions</code> に <code>debounce</code> で遅延させるトリガーが指定されている場合には、変更のコミットはさらに延期されます。</li>
<li><code>$cancelUpdate()</code> &ndash; <code>$rollbackViewValue()</code> に名前が変更されましたが、同じ機能のままで、<code>$viewValue</code> の値を <code>$lastCommittedViewValue</code> に戻し、ペンディング中の debounce されている更新と、input への再 render の処理をキャンセルします。</li>
</ul>


<p><code>$cancelUpdate()</code> を利用しているコードは、以下の例に従って移行してください。</p>

<p>前：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$scope</span><span class="p">.</span><span class="nx">resetWithCancel</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">keyCode</span> <span class="o">==</span> <span class="mi">27</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">$scope</span><span class="p">.</span><span class="nx">myForm</span><span class="p">.</span><span class="nx">myInput1</span><span class="p">.</span><span class="nx">$cancelUpdate</span><span class="p">();</span>
</span><span class='line'>    <span class="nx">$scope</span><span class="p">.</span><span class="nx">myValue</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>後：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$scope</span><span class="p">.</span><span class="nx">resetWithCancel</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">keyCode</span> <span class="o">==</span> <span class="mi">27</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">$scope</span><span class="p">.</span><span class="nx">myForm</span><span class="p">.</span><span class="nx">myInput1</span><span class="p">.</span><span class="nx">$rollbackViewValue</span><span class="p">();</span>
</span><span class='line'>    <span class="nx">$scope</span><span class="p">.</span><span class="nx">myValue</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>$interpolate</h3>

<p><em><a href="https://github.com/angular/angular.js/commit/88c2193c71954b9e7e7e4bdf636a2b168d36300d">split .parts into .expressions and .separators</a></em></p>

<p><code>$interpolate</code> に返される function は <code>.parts</code> 配列を持たなくなりました。</p>

<p>代わりに、2 つの配列を持つようになります。</p>

<ul>
<li><code>.expressions</code> &ndash; interpolate されるテキストの expression 配列。</li>
<li><code>.separators</code> &ndash; interpolation 間を区切る文字列の配列で、この配列はマージしやすくするために、<strong>常に</strong> <code>.expressions</code> 配列より 1 アイテム長くなっています。</li>
</ul>


<h3>$animate</h3>

<p><em><a href="https://github.com/angular/angular.js/commit/1cb8584e8490ecdb1b410a8846c4478c6c2c0e53">insert elements at the start of the parent container instead of at the end</a></em></p>

<p><code>$animate</code> は、親コンテナの最後の要素とする after パラメータをデフォルトとしなくなり、after が指定されていない場合には新しい要素を最初の子要素として挿入するようになりました。</p>

<p>既存のコードを更新する場合には、<code>$animate.enter()</code> または <code>$animate.move()</code> のすべてのインスタンスを</p>

<p><code>$animate.enter(element, parent);</code></p>

<p>から</p>

<p><code>$animate.enter(element, parent, angular.element(parent[0].lastChild));</code></p>

<p>に変更してください。</p>

<p><em><a href="https://github.com/angular/angular.js/commit/1bebe36aa938890d61188762ed618b1b5e193634">make CSS blocking optional for class-based animations</a></em></p>

<p>トランジションを利用する（class-add や class-remove のような）セットアップ CSS class ベースのアニメーションコードは、スタイルがすぐに適用されるように空の transition 値を与えなければなりません。つまり、アニメーションのコードがセットアップ class で定義されているスタイルを適用し、その CSS class で <code>transition:0s none</code> の値が存在しない限りは即座に適用されません。この状況はトランジションがベース CSS クラスに存在し、アニメーションが開始されているケースのことです。</p>

<p>前：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.animated.my-class-add</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">opacity</span><span class="o">:</span><span class="m">0</span><span class="p">;</span>
</span><span class='line'>  <span class="n">transition</span><span class="o">:</span><span class="m">0.5s</span> <span class="n">linear</span> <span class="n">all</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nc">.animated.my-class-add.my-class-add-active</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">opacity</span><span class="o">:</span><span class="m">1</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>後：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.animated.my-class-add</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">transition</span><span class="o">:</span><span class="m">0s</span> <span class="n">linear</span> <span class="n">all</span><span class="p">;</span>
</span><span class='line'>  <span class="k">opacity</span><span class="o">:</span><span class="m">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nc">.animated.my-class-add.my-class-add-active</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">transition</span><span class="o">:</span><span class="m">0.5s</span> <span class="n">linear</span> <span class="n">all</span><span class="p">;</span>
</span><span class='line'>  <span class="k">opacity</span><span class="o">:</span><span class="m">1</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>詳細は ngAnimate のドキュメントで確認してください。</p>

<h3>$compile</h3>

<p><em><a href="https://github.com/angular/angular.js/commit/299b220f5e05e1d4e26bfd58d0b2fd7329ca76b1">add support for $observer deregistration</a></em></p>

<p><code>attr.$observe</code> の呼び出しはオブザーバー function ではなく、登録解除の function を返すようになりました。以下の例に従ってコードを移行してください。</p>

<p>前：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">directive</span><span class="p">(</span><span class="s1">&#39;directiveName&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">link</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">scope</span><span class="p">,</span> <span class="nx">elm</span><span class="p">,</span> <span class="nx">attr</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="kd">var</span> <span class="nx">observer</span> <span class="o">=</span> <span class="nx">attr</span><span class="p">.</span><span class="nx">$observe</span><span class="p">(</span><span class="s1">&#39;someAttr&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">value</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">value</span><span class="p">);</span>
</span><span class='line'>      <span class="p">});</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>後：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">directive</span><span class="p">(</span><span class="s1">&#39;directiveName&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">link</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">scope</span><span class="p">,</span> <span class="nx">elm</span><span class="p">,</span> <span class="nx">attr</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="kd">var</span> <span class="nx">observer</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">value</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">value</span><span class="p">);</span>
</span><span class='line'>      <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>      <span class="nx">attr</span><span class="p">.</span><span class="nx">$observe</span><span class="p">(</span><span class="s1">&#39;someAttr&#39;</span><span class="p">,</span> <span class="nx">observer</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<h3>$httpBackend</h3>

<p><em><a href="https://github.com/angular/angular.js/commit/6680b7b97c0326a80bdccaf0a35031e4af641e0e">don&rsquo;t error when JSONP callback called with no parameter</a></em></p>

<p>空のレスポンスに対する JSONP の動作が変更されました。以前は JSONP レスポンスが空の場合にはエラーとみなされていましたが、適切にイベントをリスンするようになりました。</p>

<h3>build</h3>

<p><em><a href="https://github.com/angular/angular.js/commit/eaa1d00b24008f590b95ad099241b4003688cdda">remove IE8 target from all test configs</a></em></p>

<p>IE 8 はサポートされなくなりました。</p>

<h3>input</h3>

<p><em><a href="https://github.com/angular/angular.js/commit/46bd6dc88de252886d75426efc2ce8107a5134e9">support types date, time, datetime-local, month, week</a></em></p>

<p>type が date、time、datetime-local、month、week の input では、モデルとして常に <code>Date</code> オブジェクトが必須となりました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AngularJS 1.3.0 リリース]]></title>
    <link href="http://angularjsninja.com//blog/2014/10/14/angularjs-1.3.0-released/"/>
    <updated>2014-10-14T12:44:47+09:00</updated>
    <id>http://angularjsninja.com//blog/2014/10/14/angularjs-1.3.0-released</id>
    <content type="html"><![CDATA[<p>AngularJS 1.3.0 がリリースされました！</p>

<p>ということで、公式ブログの記事『<a href="http://angularjs.blogspot.jp/2014/10/angularjs-130-superluminal-nudge.html">AngularJS 1.3.0 &ndash; superluminal-nudge</a>』を日本語訳しておきました。</p>

<hr />

<h2>AngularJS 1.3.0 &ndash; superluminal-nudge</h2>

<p>8 か月にわたり、2,000 を超えるコミット、19 のベータと 6 のリリースキャンディデートを経て、遂に AngularJS 1.3.0 superluminal-nudge をリリースしました！</p>

<p>このリリースには、注目すべき機能が多く含まれています。</p>

<ul>
<li><a href="https://docs.angularjs.org/guide/expression#one-time-binding">One-time bindings</a> &ndash; <code>::</code> を付けることによって、内挿 (interpolate) が 1 度となり、それ以降は監視 (watch) されなくなる。</li>
<li><a href="https://docs.angularjs.org/api/ngAria">ngAria</a> &ndash; デフォルトで（アクセシビリティに関して）アクセシブルなカスタムコンポーネントを実装するための新しいモジュール</li>
<li><a href="https://docs.angularjs.org/api/ngMessages">ngMessages</a> &ndash; フォームの妥当性に対するフィードバック（メッセージ）を実装しやすくする新しいディレクティブ</li>
<li><a href="https://docs.angularjs.org/api/ng/directive/ngModelOptions">ngModelOptions</a> &ndash; バインドされたモデルの振る舞いをカスタマイズしやすくするディレクティブ。例：debounce （モデル更新のタイミング制御）、getter-setter スタイルのモデル、blur 時のモデル更新など。</li>
<li><a href="https://docs.angularjs.org/error/$injector/strictdi">Strict DI</a> &ndash; 簡略した DI シンタックスを利用していて minify できないコードを見つけることができるオプション</li>
</ul>


<!-- more -->


<p>このリリースには、400 を超えるバグフィックスに、1,000 近いドキュメントの改善が含まれています。また、<a href="https://docs.angularjs.org/api/ng/type/ngModel.NgModelController">custom form controls</a> や <a href="https://docs.angularjs.org/api/ngAnimate/service/$animate">animations</a> まわりの API を、明確で使いやすいように改善しています。</p>

<p>1.3.0 は大幅に性能が改善しています。メモリ消費量を抑え、DOM 操作の速度を高め、Angular アプリケーションの全体的な応答速度を改善しています。詳細については、GitHub の <a href="https://github.com/angular/angular.js/tree/master/benchmarks">benchmarks in the AngularJS source code</a> で確認していただけます。</p>

<p><a href="https://github.com/angular/angular.js/blob/master/CHANGELOG.md#130-superluminal-nudge-2014-10-13">Changelog on Github</a> では、変更点すべてのリストを確認できます。</p>

<p>多くの要望により、AngularJS は公式に npm でパッケージを公開しました。<code>npm install angular</code> で AngularJS 1.3.0 を取得できます。これにより、フロントエンド Web 開発のすばらしいツール類を利用しやすくなると期待しています。</p>

<p>Angular 1.2 を利用されている場合は、<a href="https://docs.angularjs.org/guide/migration#migrating-from-1-2-to-1-3">corresponding section of the migration docs</a> を参照し、breaking changes について意識しておいてください。そして、<a href="http://angularjsninja.com//blog/2013/12/15/angularjs-1.3-discontinues-support-for-ie8/">昨年 12 月にご案内していた</a>ように、AngularJS 1.3.0 は IE 8 をサポートしていません。これにより、IE 8 のサポートを続けていては可能でなかった大幅な改善と性能向上を実現しています。IE 8 のサポートを必要とするアプリケーションを開発していく場合には、ほぼすべての non-breaking fixes が含まれている最新の 1.2.x ブランチをご利用ください。</p>

<p>新しいバージョンの Angular をぜひ試していただき、もし不具合を発見された場合には <a href="https://github.com/angular/angular.js/issues">GitHub で submit issues</a> してください。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[期間限定の対面企画]]></title>
    <link href="http://angularjsninja.com//blog/2014/10/11/angularjs-in-person/"/>
    <updated>2014-10-11T02:08:08+09:00</updated>
    <id>http://angularjsninja.com//blog/2014/10/11/angularjs-in-person</id>
    <content type="html"><![CDATA[<p>「AngularJS のこと対面で教えてよ！」というリクエストにお応えします。</p>

<p>ご希望あれば Twitter で <a href="https://twitter.com/tama3bb">@tama3bb</a> までご連絡ください。各日とも先着 1 名です。</p>

<h3>日時</h3>

<ul>
<li>2014/10/16（木） 16:00 &ndash; 18:00 （ご予約済み）</li>
<li>2014/10/17（金） 16:00 &ndash; 18:00</li>
<li>2014/10/24（金） 16:00 &ndash; 18:00</li>
<li>2014/10/31（金） 16:00 &ndash; 18:00</li>
<li>2014/11/ 7（金） 16:00 &ndash; 18:00 （ご予約済み）</li>
<li>2014/11/14（金） 16:00 &ndash; 18:00 （ご予約済み）</li>
</ul>


<!-- more -->


<h3>場所</h3>

<p>グランフロント大阪あたりのカフェ</p>

<h3>料金</h3>

<p>500 円（当日、カフェラテをご馳走してくださーい）</p>

<h3>内容</h3>

<p>AngularJS だけでなく、以下のような内容でしたらお話できます。</p>

<ul>
<li>JavaScript (AngularJS, jQuery, etc.)</li>
<li>HTML / CSS (Bootstrap, etc.)</li>
<li>Java</li>
<li>リモートワーク（歴 2 年）</li>
<li>フリーランス（歴 8 年）</li>
<li>英語学習（大昔ですが、TOEIC 915）</li>
<li>語学留学（アメリカ、フィリピン）</li>
<li>転職（退職経験 4 回）</li>
</ul>


<h3>キャンセル方法</h3>

<p>もともと梅田で晩に用事がある日ですので、当日の 16 時までにご連絡いただければドタキャンでも構いません。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[【動画】Yeoman で AngularJS アプリケーションを作ろう！]]></title>
    <link href="http://angularjsninja.com//blog/2014/09/02/video-angularjs-app-with-yeoman/"/>
    <updated>2014-09-02T16:58:19+09:00</updated>
    <id>http://angularjsninja.com//blog/2014/09/02/video-angularjs-app-with-yeoman</id>
    <content type="html"><![CDATA[<p>Yeoman のサイトにある <a href="http://yeoman.io/codelab.html">Tutorial (codelab)</a> をスクリーンキャストしてみました。</p>

<iframe width="853" height="480" src="http://angularjsninja.com///www.youtube.com/embed/uv_ALCiCA6E?rel=0" frameborder="0" allowfullscreen></iframe>


<p><a href="https://github.com/yeoman/generator-angular">generator-angular</a> で AngularJS 用のコードを生成し、そこから TODO アプリケーションに変更していく流れをデモしてます。</p>

<p>Yeoman がどんなものか試してみたかった方や、眺めてるだけで試した気になれる方にオススメです！</p>

<!-- more -->


<p>スクリーンキャストで学習するのが好きなので、自分でもスクリーンキャストをやってみようという「はじめて」の試みなので、わかりにくいところが多々あるかと思います。お気付きのところがありましたらご指摘ください。今後のスクリーンキャストにて改善していきますので！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AngularJS styleguide 日本語訳]]></title>
    <link href="http://angularjsninja.com//blog/2014/07/29/angularjs-styleguide-in-Japanese/"/>
    <updated>2014-07-29T08:22:55+09:00</updated>
    <id>http://angularjsninja.com//blog/2014/07/29/angularjs-styleguide-in-Japanese</id>
    <content type="html"><![CDATA[<p><a href="https://twitter.com/toddmotto">@toddmotto</a> さんが AngularJS styleguide を GitHub に上げてました。</p>

<blockquote class="twitter-tweet" data-cards="hidden" lang="ja"><p>Open sourced my opinionated AngularJS styleguide on GitHub: <a href="https://t.co/g2BPwkUXuS">https://t.co/g2BPwkUXuS</a> <a href="https://twitter.com/hashtag/angular?src=hash">#angular</a> <a href="https://twitter.com/hashtag/javascript?src=hash">#javascript</a></p>&mdash; Todd Motto (@toddmotto) <a href="https://twitter.com/toddmotto/statuses/493406283887050753">2014, 7月 27</a></blockquote>


<script async src="http://angularjsninja.com///platform.twitter.com/widgets.js" charset="utf-8"></script>


<h3>AngularJS styleguide 日本語訳</h3>

<p>この AngularJS styleguide を Fork し、『<a href="https://github.com/tama3bb/angularjs-styleguide">AngularJS スタイルガイド</a>』として日本語に訳しておきました。</p>

<h3>JavaScript Style Guide</h3>

<p>なお、JavaScript のスタイルガイドについては、Airbnb の <a href="https://github.com/airbnb/javascript">JavaScript Style Guide</a> がお気に入りです。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AngularJS Ionic Firebase で作るモバイルチャットアプリ]]></title>
    <link href="http://angularjsninja.com//blog/2014/02/17/angularjs-ionic-firebase/"/>
    <updated>2014-02-17T02:15:39+09:00</updated>
    <id>http://angularjsninja.com//blog/2014/02/17/angularjs-ionic-firebase</id>
    <content type="html"><![CDATA[<p>この週末、オリンピックを見ながら日本人が出てくるまでヒマだったりしたので、ふとモバイルチャットでも作ってみるかと思い立ってダラダラとやってみました。</p>

<p>数時間しかかけてないので「ザ・未完成」なデキですが、サクッとリアルタイムなモバイルチャットアプリケーションを作れてしまうのは、なんともラクチンで楽しい。</p>

<h2>利用した技術</h2>

<ul>
<li><a href="http://angularjs.org/">AngularJS</a></li>
<li><a href="http://ionicframework.com/">Ionic</a></li>
<li><a href="https://www.firebase.com/">Firebase</a></li>
</ul>


<p>Ionic についてはこれまでにブログで、書いてないや…。Firebase については<a href="http://angularjsninja.com//blog/2013/09/01/angularfire-realtime-chat-app/">ずいぶん前に</a>。</p>

<!-- more -->


<h2>モバイルチャットアプリ</h2>

<p>リアルタイム処理は Firebase まかせ。見た目は Ionic ベースで少し CSS をいじった程度。認証はとりあえず付けなかったので、サムネイルには AngularJS Ninja のをずっと出しちゃってます。</p>

<p>iPhone や Android から、以下のアドレスを表示して試していただくのがオススメです。</p>

<p><a href="http://ionic-fire.firebaseapp.com/">http://ionic-fire.firebaseapp.com/</a></p>

<iframe src="http://ionic-fire.firebaseapp.com/" height="568" width="320" frameborder="0" style="border: 3px double #aaa;"></iframe>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[非活性（ng-disabled）にしてもaタグのボタンだとng-click動くので注意]]></title>
    <link href="http://angularjsninja.com//blog/2014/02/06/anchor-with-ngdisabled-caveat/"/>
    <updated>2014-02-06T15:29:21+09:00</updated>
    <id>http://angularjsninja.com//blog/2014/02/06/anchor-with-ngdisabled-caveat</id>
    <content type="html"><![CDATA[<hr />

<h2>Bootstrap のボタン</h2>

<p><a href="http://getbootstrap.com">Bootstrap</a> ベースのボタンに<code>ng-click</code>を記述する（form を submit しない）コードは、主に以下の 2 通りある。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;button</span> <span class="na">type=</span><span class="s">&quot;button&quot;</span> <span class="na">class=</span><span class="s">&quot;btn&quot;</span> <span class="na">ng-click=</span><span class="s">&quot;handleClick()&quot;</span><span class="nt">&gt;</span>Done<span class="nt">&lt;/button&gt;</span>
</span><span class='line'><span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;#&quot;</span> <span class="na">class=</span><span class="s">&quot;btn&quot;</span> <span class="na">ng-click=</span><span class="s">&quot;handleClick()&quot;</span><span class="nt">&gt;</span>Done<span class="nt">&lt;/a&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>どちらでも見た目は同じになるし、イベント処理は<code>ng-click</code>がやってくれるし、<code>&lt;a&gt;</code>のほうがコードは短くなるしって感じで、どっちも一緒なんだし<code>&lt;a&gt;</code>にしとこってノリでやってると、<code>disabled</code> のワナにハマるかも。</p>

<!-- more -->


<h2>aタグの場合、ng-disabled で非活性にできるのは見た目だけ</h2>

<p>ボタンを非活性にするための AngularJS 標準 directive に、<a href="http://docs.angularjs.org/api/ng.directive:ngDisabled"><code>ng-disabled</code></a>がある。これを使うと、<code>ng-disabled="true"</code>となるときにボタンが非活性になってくれる。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;button</span> <span class="na">type=</span><span class="s">&quot;button&quot;</span> <span class="na">class=</span><span class="s">&quot;btn&quot;</span> <span class="na">ng-click=</span><span class="s">&quot;handleClick()&quot;</span> <span class="na">ng-disabled=</span><span class="s">&quot;aForm.$invalid&quot;</span><span class="nt">&gt;</span>Done<span class="nt">&lt;/button&gt;</span>
</span><span class='line'><span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;#&quot;</span> <span class="na">class=</span><span class="s">&quot;btn&quot;</span> <span class="na">ng-click=</span><span class="s">&quot;handleClick()&quot;</span> <span class="na">ng-disabled=</span><span class="s">&quot;aForm.$invalid&quot;</span><span class="nt">&gt;</span>Done<span class="nt">&lt;/a&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>ここで注意が必要なのは、<code>&lt;a&gt;</code>のほうは<code>ng-disabled="true"</code>で非活性になっているときでも、ボタンクリックで<code>ng-click</code>の処理が走るという点。見た目が非活性になっているので、<code>ng-click</code>のほうも制御してくれているだろうと期待して（思い込んで）しまう。</p>

<p>そんなわけで、<code>&lt;a&gt;</code>タグに<code>ng-disabled</code>を使うときは注意しよう。<code>&lt;button type="button"&gt;</code>に変えるか、どうしても<code>&lt;a&gt;</code>タグでいくなら<code>ng-click="!aForm.$invalid &amp;&amp; handleClick()"</code>とかってしときましょう…。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AngularJSのng-ifで文字列を使うなら !! を付けよう]]></title>
    <link href="http://angularjsninja.com//blog/2014/02/05/ngif-string-caveat/"/>
    <updated>2014-02-05T17:44:16+09:00</updated>
    <id>http://angularjsninja.com//blog/2014/02/05/ngif-string-caveat</id>
    <content type="html"><![CDATA[<hr />

<h2>&lsquo;0&rsquo; が表示されない…</h2>

<p><code>ng-if</code> あるいは、<code>ng-show</code>や<code>ng-hide</code>を使うときに、string 値の有無で表示判定を記述することもある。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;p</span> <span class="na">ng-if=</span><span class="s">&quot;model.value&quot;</span><span class="nt">&gt;</span>{{model.label}}<span class="nt">&lt;/p&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>そんなとき、<code>model.value</code>の値が<code>'0'</code>だったらどうなるか。</p>

<p>なんと、表示されない…。</p>

<!-- more -->


<h2>&lsquo;0&rsquo; だけじゃない</h2>

<p>この現象、<code>'0'</code>だけでなく、<code>'f'</code> <code>'no'</code> <code>'n'</code>といった文字列（大文字・小文字問わず）の場合であっても表示されない。</p>

<p>angular.js のコードはこうなってる。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">toBoolean</span><span class="p">(</span><span class="nx">value</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="k">typeof</span> <span class="nx">value</span> <span class="o">===</span> <span class="s1">&#39;function&#39;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">value</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nx">value</span> <span class="o">&amp;&amp;</span> <span class="nx">value</span><span class="p">.</span><span class="nx">length</span> <span class="o">!==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">v</span> <span class="o">=</span> <span class="nx">lowercase</span><span class="p">(</span><span class="s2">&quot;&quot;</span> <span class="o">+</span> <span class="nx">value</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">value</span> <span class="o">=</span> <span class="o">!</span><span class="p">(</span><span class="nx">v</span> <span class="o">==</span> <span class="s1">&#39;f&#39;</span> <span class="o">||</span> <span class="nx">v</span> <span class="o">==</span> <span class="s1">&#39;0&#39;</span> <span class="o">||</span> <span class="nx">v</span> <span class="o">==</span> <span class="s1">&#39;false&#39;</span> <span class="o">||</span> <span class="nx">v</span> <span class="o">==</span> <span class="s1">&#39;no&#39;</span> <span class="o">||</span> <span class="nx">v</span> <span class="o">==</span> <span class="s1">&#39;n&#39;</span> <span class="o">||</span> <span class="nx">v</span> <span class="o">==</span> <span class="s1">&#39;[]&#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">value</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">value</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>boolean にしちゃっておこう</h2>

<p>ということで、文字列の有無で判定させたいだけってときは<code>!!</code>を付けときましょう。boolean とか object の場合でも<code>!!</code>付ける方針にしとくのがラクでいいかな。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;p</span> <span class="na">ng-if=</span><span class="s">&quot;!!model.value&quot;</span><span class="nt">&gt;</span>{{model.label}}<span class="nt">&lt;/p&gt;</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AngularJS で HTTP ヘッダを設定するには]]></title>
    <link href="http://angularjsninja.com//blog/2014/02/04/angularjs-http-headers/"/>
    <updated>2014-02-04T16:08:51+09:00</updated>
    <id>http://angularjsninja.com//blog/2014/02/04/angularjs-http-headers</id>
    <content type="html"><![CDATA[<hr />

<h2>HTTP Headers を設定</h2>

<p>AngularJS による HTTP リクエストについては、<code>$httpProvider.defaults.headers</code>オブジェクトで HTTP ヘッダ情報を設定できる。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$httpProvider</span><span class="p">.</span><span class="nx">defaults</span><span class="p">.</span><span class="nx">headers</span><span class="p">.</span><span class="nx">common</span><span class="p">.</span><span class="nx">Authorization</span> <span class="o">=</span> <span class="s1">&#39;...&#39;</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>以下のように、get だけ、post だけに適用することも。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$httpProvider</span><span class="p">.</span><span class="nx">defaults</span><span class="p">.</span><span class="nx">headers</span><span class="p">.</span><span class="nx">get</span><span class="p">[</span><span class="s1">&#39;Authorization&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="s1">&#39;...&#39;</span><span class="p">;</span>
</span><span class='line'><span class="nx">$httpProvider</span><span class="p">.</span><span class="nx">defaults</span><span class="p">.</span><span class="nx">headers</span><span class="p">.</span><span class="nx">post</span> <span class="o">=</span> <span class="p">{</span> <span class="s1">&#39;Authorization&#39;</span> <span class="o">:</span> <span class="s1">&#39;...&#39;</span> <span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>（複数の書き方を例示するために、わざと違った書き方にしてます）</p>

<!-- more -->


<h2>Cache-Control の設定例</h2>

<p>IE は XHR (Ajax) リクエストでもキャッシュするようなので、IE をサポートするのであれば初めから Cache-Control などの設定を入れておくのがいいのかも。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$httpProvider</span><span class="p">.</span><span class="nx">defaults</span><span class="p">.</span><span class="nx">headers</span><span class="p">.</span><span class="nx">common</span><span class="p">[</span><span class="s1">&#39;Cache-Control&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="s1">&#39;no-cache&#39;</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>他にも If-Modified-Since を設定する必要がありそう。あるいは Expires のほうが適切なのかも。ここの設定について詳しい方、こっそり教えてください！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AngularJS で Enter キーを検出するコード]]></title>
    <link href="http://angularjsninja.com//blog/2014/02/03/angularjs-event-on-enter/"/>
    <updated>2014-02-03T18:28:23+09:00</updated>
    <id>http://angularjsninja.com//blog/2014/02/03/angularjs-event-on-enter</id>
    <content type="html"><![CDATA[<hr />

<p>テキストボックスなどで、Enter キーによるイベント処理を記述するコード例をいくつか。</p>

<h2>$event オブジェクト</h2>

<p><code>ng-keydown</code>などの directive を利用する際には、<code>$event</code>でイベントオブジェクトを利用。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$scope</span><span class="p">.</span><span class="nx">comments</span> <span class="o">=</span> <span class="p">[];</span>
</span><span class='line'><span class="nx">$scope</span><span class="p">.</span><span class="nx">handleKeydown</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">which</span> <span class="o">!==</span> <span class="mi">13</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">$scope</span><span class="p">.</span><span class="nx">comments</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">$scope</span><span class="p">.</span><span class="nx">newComment</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">$scope</span><span class="p">.</span><span class="nx">newComment</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;text&quot;</span> <span class="na">ng-model=</span><span class="s">&quot;newComment&quot;</span> <span class="na">ng-keydown=</span><span class="s">&quot;handleKeydown($event)&quot;</span><span class="nt">&gt;</span>
</span><span class='line'><span class="nt">&lt;ul&gt;</span>
</span><span class='line'>  <span class="nt">&lt;li</span> <span class="na">ng-repeat=</span><span class="s">&quot;comment in comments&quot;</span><span class="nt">&gt;</span><span class="nt">&lt;/li&gt;</span>
</span><span class='line'><span class="nt">&lt;ul&gt;</span>
</span></code></pre></td></tr></table></div></figure>




<!-- more -->


<h2>カスタム directive でのイベント処理</h2>

<p>カスタム directive を定義する場合は、jQuery と同じような感じでバインド。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">myApp</span><span class="p">.</span><span class="nx">directive</span><span class="p">(</span><span class="s1">&#39;handleKeydown&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">require</span><span class="o">:</span> <span class="s1">&#39;ngModel&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">link</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">scope</span><span class="p">,</span> <span class="nx">element</span><span class="p">,</span> <span class="nx">attrs</span><span class="p">,</span> <span class="nx">modelCtrl</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">element</span><span class="p">.</span><span class="nx">bind</span><span class="p">(</span><span class="s1">&#39;keydown&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">which</span> <span class="o">===</span> <span class="mi">13</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">scope</span><span class="p">.</span><span class="nx">$apply</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">scope</span><span class="p">.</span><span class="nx">comments</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">scope</span><span class="p">.</span><span class="nx">newComment</span><span class="p">);</span>
</span><span class='line'>            <span class="nx">scope</span><span class="p">.</span><span class="nx">newComment</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span><span class="p">;</span>
</span><span class='line'>          <span class="p">});</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>      <span class="p">});</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;text&quot;</span> <span class="na">ng-model=</span><span class="s">&quot;newComment&quot;</span> <span class="na">handle-keydown</span><span class="nt">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>form（ng-form）の submit</h2>

<p>最後に持ってきたものの、form の submit で実現することを真っ先に検討するのが吉。Enter キーも処理されるし、テキストボックスがたくさんあっても無問題。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;form</span> <span class="na">ng-submit=</span><span class="s">&quot;handleKeydown()&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;text&quot;</span> <span class="na">ng-model=</span><span class="s">&quot;newComment&quot;</span><span class="nt">&gt;</span>
</span><span class='line'><span class="nt">&lt;/form&gt;</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Angular カンファレンス（ng-conf 2014）Jan. 17 動画まとめ]]></title>
    <link href="http://angularjsninja.com//blog/2014/01/18/ng-conf-2014/"/>
    <updated>2014-01-18T12:49:50+09:00</updated>
    <id>http://angularjsninja.com//blog/2014/01/18/ng-conf-2014</id>
    <content type="html"><![CDATA[<hr />

<h2>ng-conf 2014 &ndash; The World’s First Angular Conference in Salt Lake City, Utah</h2>

<p>Angular カンファレンス <a href="http://ng-conf.org">ng-conf 2014</a> 最終日（Friday, January 17）の動画まとめです。</p>

<p>YouTube の <a href="http://www.youtube.com/user/ngconfvideos">ng-conf 2014 チャンネル</a> だけでなく、公式サイトの<a href="http://angularjs.org">トップページ</a>にも動画が表示されるようになっていますが、このエントリーでは最終日のスケジュールどおりに並べています。</p>

<h3>Angular === Community (Keynote)</h3>

<iframe width="560" height="315" src="http://angularjsninja.com///www.youtube.com/embed/h-SQvre_6qU" frameborder="0" allowfullscreen></iframe>


<p>Igor Minar</p>

<!-- more -->


<h3>How to use Typescript on your Angular Application and Be Happy</h3>

<iframe width="560" height="315" src="http://angularjsninja.com///www.youtube.com/embed/u6TeBM_SC8w" frameborder="0" allowfullscreen></iframe>


<p>Sean Hess</p>

<h3>Building Realtime Apps With Firebase and Angular</h3>

<iframe width="560" height="315" src="http://angularjsninja.com///www.youtube.com/embed/e4yUTkva_FM" frameborder="0" allowfullscreen></iframe>


<p>Anant Narayanan</p>

<h3>Angular Directives that Scale</h3>

<iframe width="560" height="315" src="http://angularjsninja.com///www.youtube.com/embed/TQoV0Jt3IJg" frameborder="0" allowfullscreen></iframe>


<p>Burke Holland</p>

<h3>Dart, it&rsquo;s Angular Too</h3>

<iframe width="560" height="315" src="http://angularjsninja.com///www.youtube.com/embed/RqKUTGB-CxA" frameborder="0" allowfullscreen></iframe>


<p>James Deboer</p>

<h3>Zones</h3>

<iframe width="560" height="315" src="http://angularjsninja.com///www.youtube.com/embed/3IqtmUscE_U" frameborder="0" allowfullscreen></iframe>


<p>Brian Ford</p>

<h3>Angular with Browserify</h3>

<iframe width="560" height="315" src="http://angularjsninja.com///www.youtube.com/embed/NTPutZ99XWY" frameborder="0" allowfullscreen></iframe>


<p>Ben Clinkinbeard</p>

<h3>Angular and RequireJS</h3>

<iframe width="560" height="315" src="http://angularjsninja.com///www.youtube.com/embed/4yulGISBF8w" frameborder="0" allowfullscreen></iframe>


<p>Thomas Burleson</p>

<h3>Using AngularJS to create iPhone &amp; Android applications with PhoneGap</h3>

<iframe width="560" height="315" src="http://angularjsninja.com///www.youtube.com/embed/wVntVkRLR3M" frameborder="0" allowfullscreen></iframe>


<p>Daniel Zen</p>

<h3>Robotics powering interfaces with AngularJS to the Arduino.</h3>

<iframe width="560" height="315" src="http://angularjsninja.com///www.youtube.com/embed/MhVgGE-pgEY" frameborder="0" allowfullscreen></iframe>


<p>Ari Lerner</p>

<h3>End to End Angular Testing with Protractor</h3>

<iframe width="560" height="315" src="http://angularjsninja.com///www.youtube.com/embed/aQipuiTcn3U" frameborder="0" allowfullscreen></iframe>


<p>Julie Ralph</p>

<h3>Using ngModelController to Make Sexy Custom Components</h3>

<iframe width="560" height="315" src="http://angularjsninja.com///www.youtube.com/embed/jVzymluqmg4" frameborder="0" allowfullscreen></iframe>


<p>Jason Aden</p>

<h3>PhotoHunt</h3>

<iframe width="560" height="315" src="http://angularjsninja.com///www.youtube.com/embed/I-TvWfXVR08" frameborder="0" allowfullscreen></iframe>


<p>Silvano Luciani</p>

<h3>Angular Performance</h3>

<iframe width="560" height="315" src="http://angularjsninja.com///www.youtube.com/embed/zyYpHIOrk_Y" frameborder="0" allowfullscreen></iframe>


<p>The Double Click Team</p>

<h3>AngularJS ORM</h3>

<iframe width="560" height="315" src="http://angularjsninja.com///www.youtube.com/embed/Iw-3qgG_ipU" frameborder="0" allowfullscreen></iframe>


<p>Dean Sofer</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Angular カンファレンス（ng-conf 2014）Jan. 16 動画まとめ]]></title>
    <link href="http://angularjsninja.com//blog/2014/01/17/ng-conf-2014/"/>
    <updated>2014-01-17T14:32:50+09:00</updated>
    <id>http://angularjsninja.com//blog/2014/01/17/ng-conf-2014</id>
    <content type="html"><![CDATA[<hr />

<h2>ng-conf 2014 &ndash; The World&rsquo;s First Angular Conference in Salt Lake City, Utah</h2>

<p>Angular カンファレンス <a href="http://ng-conf.org">ng-conf 2014</a> が、アメリカはユタ州ソルトレイクシティで開催中です。</p>

<p>YouTube の <a href="http://www.youtube.com/user/ngconfvideos">ng-conf 2014 チャンネル</a> のほうに動画はまとめてアップロードされていますが、このエントリーでは当日（Thursday, January 16）のスケジュールどおりに並べています。最終日（Friday, January 17）の動画は<a href="http://angularjsninja.com//blog/2014/01/18/ng-conf-2014/">次のエントリー</a>で。</p>

<h3>Keynote</h3>

<iframe width="560" height="315" src="http://angularjsninja.com///www.youtube.com/embed/r1A1VR0ibIQ" frameborder="0" allowfullscreen></iframe>


<p>Miško Hevery &amp; Brad Green</p>

<!-- more -->


<h3>AngularJS in 20-ish Minutes</h3>

<iframe width="560" height="315" src="http://angularjsninja.com///www.youtube.com/embed/tnXO-i7944M" frameborder="0" allowfullscreen></iframe>


<p>Dan Wahlin</p>

<h3>Writing a Massive Angular App</h3>

<iframe width="560" height="315" src="http://angularjsninja.com///www.youtube.com/embed/62RvRQuMVyg" frameborder="0" allowfullscreen></iframe>


<p>The Google Double Click Team</p>

<h3>Going Postal with Angular in Promises</h3>

<iframe width="560" height="315" src="http://angularjsninja.com///www.youtube.com/embed/XcRdO5QVlqE" frameborder="0" allowfullscreen></iframe>


<p>Christian Lilley</p>

<h3>Deep Dive into Custom Directives</h3>

<iframe width="560" height="315" src="http://angularjsninja.com///www.youtube.com/embed/UMkd0nYmLzY" frameborder="0" allowfullscreen></iframe>


<p>Dave Smith</p>

<h3>Progressive Saving</h3>

<iframe width="560" height="315" src="http://angularjsninja.com///www.youtube.com/embed/JLij19xbefI" frameborder="0" allowfullscreen></iframe>


<p>John Papa</p>

<h3>Rapid Prototyping with Angular &amp; Deployd</h3>

<iframe width="560" height="315" src="http://angularjsninja.com///www.youtube.com/embed/0V8fQoqQLLA" frameborder="0" allowfullscreen></iframe>


<p>Jeff Cross</p>

<h3>Rich Data Models &amp; Angular</h3>

<iframe width="560" height="315" src="http://angularjsninja.com///www.youtube.com/embed/JfykD-0tpjI" frameborder="0" allowfullscreen></iframe>


<p>Ben Teese</p>

<h3>Angular Weapon Defense</h3>

<iframe width="560" height="315" src="http://angularjsninja.com///www.youtube.com/embed/f62k7b753-Y" frameborder="0" allowfullscreen></iframe>


<p>Tom Valletta &amp; Gabe Dayley</p>

<h3>Filters: Beyond OrderBy and LimitTo</h3>

<iframe width="560" height="315" src="http://angularjsninja.com///www.youtube.com/embed/L4FJ_kuO9Rc" frameborder="0" allowfullscreen></iframe>


<p>Sharon DiOrio</p>

<h3>Awesome Interfaces with AngularJS Animations</h3>

<iframe width="560" height="315" src="http://angularjsninja.com///www.youtube.com/embed/hC0MpgUoui4" frameborder="0" allowfullscreen></iframe>


<p>Lukas Rubbelke &amp; Matias Niemela</p>

<h3>Dependency Injection</h3>

<iframe width="560" height="315" src="http://angularjsninja.com///www.youtube.com/embed/_OGGsf1ZXMs" frameborder="0" allowfullscreen></iframe>


<p>Vojta Jina</p>

<h3>Angular Team Panel</h3>

<iframe width="560" height="315" src="http://angularjsninja.com///www.youtube.com/embed/srt3OBP2kGc" frameborder="0" allowfullscreen></iframe>


<p>Angular Team</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AngularJS のデータバインドを支える $apply]]></title>
    <link href="http://angularjsninja.com//blog/2013/12/27/angularjs-apply/"/>
    <updated>2013-12-27T16:19:50+09:00</updated>
    <id>http://angularjsninja.com//blog/2013/12/27/angularjs-apply</id>
    <content type="html"><![CDATA[<hr />

<h2>データバインドが効かない？！</h2>

<p>AngualrJS を使っていて楽しいのは超ラクチンなデータバインド。なのに、そのデータバインドで以下のような困ったことに遭遇しているとしたら、それは <a href="http://docs.angularjs.org/api/ng.$rootScope.Scope#methods_$apply">$apply</a> を学ぶときが来ているということ。</p>

<ul>
<li>データバインドが効かないぞ？！</li>
<li>データの反映が次のイベントまで遅れてる気がする？？</li>
</ul>


<p>こういうときは $apply の出番だ。$apply を使う必要があるケースというのは、ざくっと言うと AngularJS が知りえないところでイベントが起こっているとき。$apply で AngularJS に変化が起きていることを伝え、後のことは任せることができる。</p>

<!-- more -->


<h2>$apply が必要ないケース</h2>

<p>整合性を維持するための dirty checking（$watch）処理は、$digest ループ（サイクル）でまとめて実行される。この $digest ループが始まるきっかけは、『<a href="http://angularjsninja.com//blog/2013/12/13/angularjs-watch/">AngularJS のデータバインドを支える $watch</a>』 のページにも掲載した以下に示す各種イベント。</p>

<table>
<thead>
<tr>
<th>イベント </th>
<th> 概要</th>
</tr>
</thead>
<tbody>
<tr>
<td>ナビゲーション </td>
<td> ブラウザの location 変更時</td>
</tr>
<tr>
<td>ネットワーク </td>
<td> $http, $resource レスポンス受信時</td>
</tr>
<tr>
<td>DOM イベント </td>
<td> ng-click, ng-mouseover などの実行時</td>
</tr>
<tr>
<td>タイマー </td>
<td> $timeout によるタイマー処理の実行時</td>
</tr>
</tbody>
</table>


<p>こういった処理によってデータや UI に変更があった場合のことは、$apply を自分で記述することなく AngularJS におまかせできる。こうしたイベントでは、内部的に $apply が使われている。</p>

<h2>$apply が必要なケース</h2>

<p>じゃあ、どういうときには $apply を自分で記述する必要があるのか。それは、AngularJS 組み込みの services（$http や $timeout など）や directives（ng-click など）を使わない（使えない）とき、ということ。</p>

<p>AngularJS と無関係なところ（jQuery など）で XHR 通信して受け取ったデータをモデルに反映した場合や、あるいは datepicker などのプラグインからモデルに値を反映した場合は、そのモデルと UI が ng-model や ng-bind などでバインドされていたとしても、それだけでは即時には反映されない。反映されるのを、次の $digest サイクルが起こるまでただ待つことになる。</p>

<p>この $digest サイクルを起こす役割が $apply である。</p>

<h2>$interval と setInterval を比較して $apply を理解する</h2>

<p>まず、AngularJS 標準 API の $interval を利用している例。これであれば 1 秒毎に日時が更新され続ける。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">update</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">$scope</span><span class="p">.</span><span class="nx">now</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Date</span><span class="p">();</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="nx">update</span><span class="p">();</span>
</span><span class='line'><span class="nx">$interval</span><span class="p">(</span><span class="nx">update</span><span class="p">,</span> <span class="mi">1000</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>次に、setInterval を利用したコード。これだと 1 秒ごとには反映されない。なにかしら $digest ループが起きたタイミングで反映される。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">update</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">$scope</span><span class="p">.</span><span class="nx">now</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Date</span><span class="p">();</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="nx">update</span><span class="p">();</span>
</span><span class='line'><span class="nx">setInterval</span><span class="p">(</span><span class="nx">update</span><span class="p">,</span> <span class="mi">1000</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>setInterval に $apply を付ければ、1 秒ごとに反映されるようになる。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">update</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">$scope</span><span class="p">.</span><span class="nx">now</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Date</span><span class="p">();</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="nx">update</span><span class="p">();</span>
</span><span class='line'><span class="nx">setInterval</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">$scope</span><span class="p">.</span><span class="nx">$apply</span><span class="p">(</span><span class="nx">update</span><span class="p">);</span>
</span><span class='line'><span class="p">},</span> <span class="mi">1000</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AngularJSのスゴ本が今だけ安い！]]></title>
    <link href="http://angularjsninja.com//blog/2013/12/20/mastering-web-application-development-with-angularjs/"/>
    <updated>2013-12-20T10:10:31+09:00</updated>
    <id>http://angularjsninja.com//blog/2013/12/20/mastering-web-application-development-with-angularjs</id>
    <content type="html"><![CDATA[<hr />

<p><img src="https://www.packtpub.com/sites/default/files/782x300_Main_banner.jpg" alt="eBook Bonanza" /></p>

<h2>Mastering Web Application Development with AngularJS</h2>

<p>『<a href="http://www.packtpub.com/angularjs-web-application-development/book">Mastering Web Application Development with AngularJS | Packt Publishing</a>』が、Packt Publishing のサイトで年明け 1 月 3 日までたったの <strong>$ 5.00</strong> で販売中！</p>

<p>ちなみに Amazon では ￥ 1,854（2013/12/20 現在）で販売中。</p>

<p>『Mastering Web Application Development with AngularJS』は洋書だけど、AngularJS やるならこれだけは読んどけっていう、ほんとによく書かれてる本。めっちゃ勉強になってます。</p>

<p>これまでに読んだ AngularJS の本として比較できるのは O’Reilly の『AngularJS』と、Manning の『AngularJS in Action』（Early Access Edition で、まだ 6 章まで）だけど、『Mastering Web Application Development with AngularJS』が質・量ともに圧倒してる。</p>

<p>この本は、AngularJS のサンプルアプリケーション実装として GitHub で 2,274 スター（2013/12/20 現在）も付いている <a href="https://github.com/angular-app/angular-app">angular-app</a> の実装についてのパターンや技術を詳細に解説していて、実際に動作させることもできる CRUD アプリケーションで、AngularJS のフォルダ構成や modules の使い方、テスト、REST バックエンドとの接続、ナビゲーション、セキュリティ（authentication、authorization）などのベストプラクティスを学ぶことができる。</p>

<p>AngularJS やるぜって衆の年末年始は、コレで決まりだ！</p>
]]></content>
  </entry>
  
</feed>
